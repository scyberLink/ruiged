/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable require-jsdoc */
import { YEAR } from './constants';
class Cookie {
    name;
    value;
    maxAge;
    path;
    constructor(name, value, maxAge = YEAR, path = '/') {
        if (typeof value == 'object') {
            value = JSON.stringify(value);
        }
        this.name = name;
        this.value = value;
        this.maxAge = Date.now() + maxAge;
        this.path = path;
        this.set();
    }
    set() {
        document.cookie = `${this.name}=${encodeURIComponent(this.value)}; max-age=${this.maxAge}; path=${this.path}`;
    }
    static get(name, returnJsonIfPossible = true) {
        const cookies = document.cookie.split('; ');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].split('=');
            if (cookie[0] === name) {
                let value = decodeURIComponent(cookie[1]);
                if (returnJsonIfPossible) {
                    try {
                        const converted = JSON.parse(value);
                        if (converted) {
                            value = converted;
                        }
                    }
                    catch (error) {
                        /* empty */
                    }
                }
                return value;
            }
        }
        return null;
    }
    static delete(name) {
        document.cookie = `${name}=; max-age=-1; path=/;`;
    }
    static has(key) {
        return Cookie.get(key) || false;
    }
    static replace(name, value, maxAge = YEAR, path = '/') {
        if (typeof value == 'object') {
            value = JSON.stringify(value);
        }
        new Cookie(name, value, maxAge, path);
        const stored = Cookie.get(name);
        return stored || false;
    }
}
export default Cookie;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29va2llLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1vbi9Db29raWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdURBQXVEO0FBQ3ZELGtDQUFrQztBQUNsQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBRWxDLE1BQU0sTUFBTTtJQUNWLElBQUksQ0FBUTtJQUNaLEtBQUssQ0FBSztJQUNWLE1BQU0sQ0FBUTtJQUNkLElBQUksQ0FBUTtJQUVaLFlBQVksSUFBWSxFQUFFLEtBQVUsRUFBRSxNQUFNLEdBQUcsSUFBSSxFQUFFLElBQUksR0FBRyxHQUFHO1FBQzdELElBQUksT0FBTyxLQUFLLElBQUksUUFBUSxFQUFFO1lBQzVCLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQzlCO1FBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7UUFDaEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7UUFDbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQ2pDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUNaLENBQUM7SUFFRCxHQUFHO1FBQ0QsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLElBQUksQ0FBQyxNQUFNLFVBQVUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO0lBQy9HLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLElBQVksRUFBRSxvQkFBb0IsR0FBRyxJQUFJO1FBQ2xELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzNDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3ZDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDcEMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFO2dCQUN0QixJQUFJLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDekMsSUFBSSxvQkFBb0IsRUFBRTtvQkFDeEIsSUFBSTt3QkFDRixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO3dCQUNuQyxJQUFJLFNBQVMsRUFBRTs0QkFDYixLQUFLLEdBQUcsU0FBUyxDQUFBO3lCQUNsQjtxQkFDRjtvQkFBQyxPQUFPLEtBQUssRUFBRTt3QkFDZCxXQUFXO3FCQUNaO2lCQUNGO2dCQUNELE9BQU8sS0FBSyxDQUFBO2FBQ2I7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBWTtRQUN4QixRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQTtJQUNuRCxDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFXO1FBQ3BCLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUE7SUFDakMsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBWSxFQUFFLEtBQVUsRUFBRSxNQUFNLEdBQUcsSUFBSSxFQUFFLElBQUksR0FBRyxHQUFHO1FBQ2hFLElBQUksT0FBTyxLQUFLLElBQUksUUFBUSxFQUFFO1lBQzVCLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQzlCO1FBQ0QsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDckMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMvQixPQUFPLE1BQU0sSUFBSSxLQUFLLENBQUE7SUFDeEIsQ0FBQztDQUNGO0FBRUQsZUFBZSxNQUFNLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSByZXF1aXJlLWpzZG9jICovXG5pbXBvcnQgeyBZRUFSIH0gZnJvbSAnLi9jb25zdGFudHMnXG5cbmNsYXNzIENvb2tpZSB7XG4gIG5hbWU6IHN0cmluZ1xuICB2YWx1ZTogYW55XG4gIG1heEFnZTogbnVtYmVyXG4gIHBhdGg6IHN0cmluZ1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSwgbWF4QWdlID0gWUVBUiwgcGF0aCA9ICcvJykge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpXG4gICAgfVxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB0aGlzLnZhbHVlID0gdmFsdWVcbiAgICB0aGlzLm1heEFnZSA9IERhdGUubm93KCkgKyBtYXhBZ2VcbiAgICB0aGlzLnBhdGggPSBwYXRoXG4gICAgdGhpcy5zZXQoKVxuICB9XG5cbiAgc2V0KCkge1xuICAgIGRvY3VtZW50LmNvb2tpZSA9IGAke3RoaXMubmFtZX09JHtlbmNvZGVVUklDb21wb25lbnQodGhpcy52YWx1ZSl9OyBtYXgtYWdlPSR7dGhpcy5tYXhBZ2V9OyBwYXRoPSR7dGhpcy5wYXRofWBcbiAgfVxuXG4gIHN0YXRpYyBnZXQobmFtZTogc3RyaW5nLCByZXR1cm5Kc29uSWZQb3NzaWJsZSA9IHRydWUpIHtcbiAgICBjb25zdCBjb29raWVzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7ICcpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjb29raWUgPSBjb29raWVzW2ldLnNwbGl0KCc9JylcbiAgICAgIGlmIChjb29raWVbMF0gPT09IG5hbWUpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZVsxXSlcbiAgICAgICAgaWYgKHJldHVybkpzb25JZlBvc3NpYmxlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnRlZCA9IEpTT04ucGFyc2UodmFsdWUpXG4gICAgICAgICAgICBpZiAoY29udmVydGVkKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gY29udmVydGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8qIGVtcHR5ICovXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgc3RhdGljIGRlbGV0ZShuYW1lOiBzdHJpbmcpIHtcbiAgICBkb2N1bWVudC5jb29raWUgPSBgJHtuYW1lfT07IG1heC1hZ2U9LTE7IHBhdGg9LztgXG4gIH1cblxuICBzdGF0aWMgaGFzKGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIENvb2tpZS5nZXQoa2V5KSB8fCBmYWxzZVxuICB9XG5cbiAgc3RhdGljIHJlcGxhY2UobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55LCBtYXhBZ2UgPSBZRUFSLCBwYXRoID0gJy8nKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSlcbiAgICB9XG4gICAgbmV3IENvb2tpZShuYW1lLCB2YWx1ZSwgbWF4QWdlLCBwYXRoKVxuICAgIGNvbnN0IHN0b3JlZCA9IENvb2tpZS5nZXQobmFtZSlcbiAgICByZXR1cm4gc3RvcmVkIHx8IGZhbHNlXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29va2llXG4iXX0=