"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable require-jsdoc */
const constants_1 = require("./constants");
class Cookie {
    constructor(name, value, maxAge = constants_1.YEAR, path = '/') {
        if (typeof value == 'object') {
            value = JSON.stringify(value);
        }
        this.name = name;
        this.value = value;
        this.maxAge = Date.now() + maxAge;
        this.path = path;
        this.set();
    }
    set() {
        document.cookie = `${this.name}=${encodeURIComponent(this.value)}; max-age=${this.maxAge}; path=${this.path}`;
    }
    static get(name, returnJsonIfPossible = true) {
        const cookies = document.cookie.split('; ');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].split('=');
            if (cookie[0] === name) {
                let value = decodeURIComponent(cookie[1]);
                if (returnJsonIfPossible) {
                    try {
                        const converted = JSON.parse(value);
                        if (converted) {
                            value = converted;
                        }
                    }
                    catch (error) {
                        /* empty */
                    }
                }
                return value;
            }
        }
        return null;
    }
    static delete(name) {
        document.cookie = `${name}=; max-age=-1; path=/;`;
    }
    static has(key) {
        return Cookie.get(key) || false;
    }
    static replace(name, value, maxAge = constants_1.YEAR, path = '/') {
        if (typeof value == 'object') {
            value = JSON.stringify(value);
        }
        new Cookie(name, value, maxAge, path);
        const stored = Cookie.get(name);
        return stored || false;
    }
}
exports.default = Cookie;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29va2llLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1vbi9Db29raWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1REFBdUQ7QUFDdkQsa0NBQWtDO0FBQ2xDLDJDQUFrQztBQUVsQyxNQUFNLE1BQU07SUFNVixZQUFZLElBQVksRUFBRSxLQUFVLEVBQUUsTUFBTSxHQUFHLGdCQUFJLEVBQUUsSUFBSSxHQUFHLEdBQUc7UUFDN0QsSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRLEVBQUU7WUFDNUIsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDOUI7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNoQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUE7UUFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7UUFDaEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQ1osQ0FBQztJQUVELEdBQUc7UUFDRCxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsSUFBSSxDQUFDLE1BQU0sVUFBVSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDL0csQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBWSxFQUFFLG9CQUFvQixHQUFHLElBQUk7UUFDbEQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDM0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdkMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNwQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUU7Z0JBQ3RCLElBQUksS0FBSyxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUN6QyxJQUFJLG9CQUFvQixFQUFFO29CQUN4QixJQUFJO3dCQUNGLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7d0JBQ25DLElBQUksU0FBUyxFQUFFOzRCQUNiLEtBQUssR0FBRyxTQUFTLENBQUE7eUJBQ2xCO3FCQUNGO29CQUFDLE9BQU8sS0FBSyxFQUFFO3dCQUNkLFdBQVc7cUJBQ1o7aUJBQ0Y7Z0JBQ0QsT0FBTyxLQUFLLENBQUE7YUFDYjtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFZO1FBQ3hCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxJQUFJLHdCQUF3QixDQUFBO0lBQ25ELENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQVc7UUFDcEIsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQTtJQUNqQyxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFZLEVBQUUsS0FBVSxFQUFFLE1BQU0sR0FBRyxnQkFBSSxFQUFFLElBQUksR0FBRyxHQUFHO1FBQ2hFLElBQUksT0FBTyxLQUFLLElBQUksUUFBUSxFQUFFO1lBQzVCLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQzlCO1FBQ0QsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDckMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMvQixPQUFPLE1BQU0sSUFBSSxLQUFLLENBQUE7SUFDeEIsQ0FBQztDQUNGO0FBRUQsa0JBQWUsTUFBTSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyogZXNsaW50LWRpc2FibGUgcmVxdWlyZS1qc2RvYyAqL1xuaW1wb3J0IHsgWUVBUiB9IGZyb20gJy4vY29uc3RhbnRzJ1xuXG5jbGFzcyBDb29raWUge1xuICBuYW1lOiBzdHJpbmdcbiAgdmFsdWU6IGFueVxuICBtYXhBZ2U6IG51bWJlclxuICBwYXRoOiBzdHJpbmdcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnksIG1heEFnZSA9IFlFQVIsIHBhdGggPSAnLycpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKVxuICAgIH1cbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gICAgdGhpcy5tYXhBZ2UgPSBEYXRlLm5vdygpICsgbWF4QWdlXG4gICAgdGhpcy5wYXRoID0gcGF0aFxuICAgIHRoaXMuc2V0KClcbiAgfVxuXG4gIHNldCgpIHtcbiAgICBkb2N1bWVudC5jb29raWUgPSBgJHt0aGlzLm5hbWV9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMudmFsdWUpfTsgbWF4LWFnZT0ke3RoaXMubWF4QWdlfTsgcGF0aD0ke3RoaXMucGF0aH1gXG4gIH1cblxuICBzdGF0aWMgZ2V0KG5hbWU6IHN0cmluZywgcmV0dXJuSnNvbklmUG9zc2libGUgPSB0cnVlKSB7XG4gICAgY29uc3QgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29va2llcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY29va2llID0gY29va2llc1tpXS5zcGxpdCgnPScpXG4gICAgICBpZiAoY29va2llWzBdID09PSBuYW1lKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChjb29raWVbMV0pXG4gICAgICAgIGlmIChyZXR1cm5Kc29uSWZQb3NzaWJsZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjb252ZXJ0ZWQgPSBKU09OLnBhcnNlKHZhbHVlKVxuICAgICAgICAgICAgaWYgKGNvbnZlcnRlZCkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IGNvbnZlcnRlZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvKiBlbXB0eSAqL1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHN0YXRpYyBkZWxldGUobmFtZTogc3RyaW5nKSB7XG4gICAgZG9jdW1lbnQuY29va2llID0gYCR7bmFtZX09OyBtYXgtYWdlPS0xOyBwYXRoPS87YFxuICB9XG5cbiAgc3RhdGljIGhhcyhrZXk6IHN0cmluZykge1xuICAgIHJldHVybiBDb29raWUuZ2V0KGtleSkgfHwgZmFsc2VcbiAgfVxuXG4gIHN0YXRpYyByZXBsYWNlKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSwgbWF4QWdlID0gWUVBUiwgcGF0aCA9ICcvJykge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpXG4gICAgfVxuICAgIG5ldyBDb29raWUobmFtZSwgdmFsdWUsIG1heEFnZSwgcGF0aClcbiAgICBjb25zdCBzdG9yZWQgPSBDb29raWUuZ2V0KG5hbWUpXG4gICAgcmV0dXJuIHN0b3JlZCB8fCBmYWxzZVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvb2tpZVxuIl19