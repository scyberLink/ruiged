"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable require-jsdoc */
const constants_1 = require("./constants");
class Cookie {
    constructor(name, value, maxAge = constants_1.YEAR, path = '/') {
        if (typeof value == 'object') {
            value = JSON.stringify(value);
        }
        this.name = name;
        this.value = value;
        this.maxAge = Date.now() + maxAge;
        this.path = path;
        this.set();
    }
    set() {
        document.cookie = `${this.name}=${encodeURIComponent(this.value)}; max-age=${this.maxAge}; path=${this.path}`;
    }
    static get(name, returnJsonIfPossible = true) {
        const cookies = document.cookie.split('; ');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].split('=');
            if (cookie[0] === name) {
                let value = decodeURIComponent(cookie[1]);
                if (returnJsonIfPossible) {
                    try {
                        const converted = JSON.parse(value);
                        if (converted) {
                            value = converted;
                        }
                    }
                    catch (error) {
                        /* empty */
                    }
                }
                return value;
            }
        }
        return null;
    }
    static delete(name) {
        document.cookie = `${name}=; max-age=-1; path=/;`;
    }
    static has(key) {
        return Cookie.get(key) || false;
    }
    static replace(name, value, maxAge = constants_1.YEAR, path = '/') {
        if (typeof value == 'object') {
            value = JSON.stringify(value);
        }
        new Cookie(name, value, maxAge, path);
        const stored = Cookie.get(name);
        return stored || false;
    }
}
exports.default = Cookie;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29va2llLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vcnVpZy9zcmMvY29tbW9uL0Nvb2tpZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVEQUF1RDtBQUN2RCxrQ0FBa0M7QUFDbEMsMkNBQWtDO0FBRWxDLE1BQU0sTUFBTTtJQU1WLFlBQVksSUFBWSxFQUFFLEtBQVUsRUFBRSxNQUFNLEdBQUcsZ0JBQUksRUFBRSxJQUFJLEdBQUcsR0FBRztRQUM3RCxJQUFJLE9BQU8sS0FBSyxJQUFJLFFBQVEsRUFBRTtZQUM1QixLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUM5QjtRQUNELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO1FBQ2xCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNoQixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7SUFDWixDQUFDO0lBRUQsR0FBRztRQUNELFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxJQUFJLENBQUMsTUFBTSxVQUFVLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUMvRyxDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFZLEVBQUUsb0JBQW9CLEdBQUcsSUFBSTtRQUNsRCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMzQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN2QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ3BDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtnQkFDdEIsSUFBSSxLQUFLLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQ3pDLElBQUksb0JBQW9CLEVBQUU7b0JBQ3hCLElBQUk7d0JBQ0YsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTt3QkFDbkMsSUFBSSxTQUFTLEVBQUU7NEJBQ2IsS0FBSyxHQUFHLFNBQVMsQ0FBQTt5QkFDbEI7cUJBQ0Y7b0JBQUMsT0FBTyxLQUFLLEVBQUU7d0JBQ2QsV0FBVztxQkFDWjtpQkFDRjtnQkFDRCxPQUFPLEtBQUssQ0FBQTthQUNiO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQVk7UUFDeEIsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLElBQUksd0JBQXdCLENBQUE7SUFDbkQsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBVztRQUNwQixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFBO0lBQ2pDLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLElBQVksRUFBRSxLQUFVLEVBQUUsTUFBTSxHQUFHLGdCQUFJLEVBQUUsSUFBSSxHQUFHLEdBQUc7UUFDaEUsSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRLEVBQUU7WUFDNUIsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDOUI7UUFDRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUNyQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQy9CLE9BQU8sTUFBTSxJQUFJLEtBQUssQ0FBQTtJQUN4QixDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxNQUFNLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSByZXF1aXJlLWpzZG9jICovXG5pbXBvcnQgeyBZRUFSIH0gZnJvbSAnLi9jb25zdGFudHMnXG5cbmNsYXNzIENvb2tpZSB7XG4gIG5hbWU6IHN0cmluZ1xuICB2YWx1ZTogYW55XG4gIG1heEFnZTogbnVtYmVyXG4gIHBhdGg6IHN0cmluZ1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSwgbWF4QWdlID0gWUVBUiwgcGF0aCA9ICcvJykge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpXG4gICAgfVxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB0aGlzLnZhbHVlID0gdmFsdWVcbiAgICB0aGlzLm1heEFnZSA9IERhdGUubm93KCkgKyBtYXhBZ2VcbiAgICB0aGlzLnBhdGggPSBwYXRoXG4gICAgdGhpcy5zZXQoKVxuICB9XG5cbiAgc2V0KCkge1xuICAgIGRvY3VtZW50LmNvb2tpZSA9IGAke3RoaXMubmFtZX09JHtlbmNvZGVVUklDb21wb25lbnQodGhpcy52YWx1ZSl9OyBtYXgtYWdlPSR7dGhpcy5tYXhBZ2V9OyBwYXRoPSR7dGhpcy5wYXRofWBcbiAgfVxuXG4gIHN0YXRpYyBnZXQobmFtZTogc3RyaW5nLCByZXR1cm5Kc29uSWZQb3NzaWJsZSA9IHRydWUpIHtcbiAgICBjb25zdCBjb29raWVzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7ICcpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjb29raWUgPSBjb29raWVzW2ldLnNwbGl0KCc9JylcbiAgICAgIGlmIChjb29raWVbMF0gPT09IG5hbWUpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZVsxXSlcbiAgICAgICAgaWYgKHJldHVybkpzb25JZlBvc3NpYmxlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnRlZCA9IEpTT04ucGFyc2UodmFsdWUpXG4gICAgICAgICAgICBpZiAoY29udmVydGVkKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gY29udmVydGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8qIGVtcHR5ICovXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgc3RhdGljIGRlbGV0ZShuYW1lOiBzdHJpbmcpIHtcbiAgICBkb2N1bWVudC5jb29raWUgPSBgJHtuYW1lfT07IG1heC1hZ2U9LTE7IHBhdGg9LztgXG4gIH1cblxuICBzdGF0aWMgaGFzKGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIENvb2tpZS5nZXQoa2V5KSB8fCBmYWxzZVxuICB9XG5cbiAgc3RhdGljIHJlcGxhY2UobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55LCBtYXhBZ2UgPSBZRUFSLCBwYXRoID0gJy8nKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSlcbiAgICB9XG4gICAgbmV3IENvb2tpZShuYW1lLCB2YWx1ZSwgbWF4QWdlLCBwYXRoKVxuICAgIGNvbnN0IHN0b3JlZCA9IENvb2tpZS5nZXQobmFtZSlcbiAgICByZXR1cm4gc3RvcmVkIHx8IGZhbHNlXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29va2llXG4iXX0=