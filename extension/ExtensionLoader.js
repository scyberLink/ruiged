"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const SharedFetcher_1 = __importDefault(require("../common/SharedFetcher"));
const constants_1 = require("../common/constants");
const RestEndpoints_1 = require("../configs/RestEndpoints");
const ExtensionId_1 = __importDefault(require("./ExtensionId"));
const BaseExtension_1 = __importDefault(require("./BaseExtension"));
const customElementRegistration_1 = require("../customElementRegistration");
const FileManagement_1 = __importDefault(require("../common/FileManagement"));
const AppContainer_1 = __importDefault(require("../layers/view/application/components/base/AppContainer"));
const BaseComponent_1 = __importDefault(require("../layers/view/application/components/base/BaseComponent"));
const ParserContainer_1 = __importDefault(require("../layers/view/application/components/ParserContainer"));
const ActionBar_1 = __importDefault(require("../layers/view/application/components/actionbar/ActionBar"));
const ColorPalette_1 = __importDefault(require("../layers/view/application/components/colorpalette/ColorPalette"));
const ConsoleCanvas_1 = __importDefault(require("../layers/view/application/components/consolecanvas/ConsoleCanvas"));
const ContextMenu_1 = __importDefault(require("../layers/view/application/components/contextmenu/ContextMenu"));
const DrawingCanvas_1 = __importDefault(require("../layers/view/application/components/drawingcanvas/DrawingCanvas"));
const MenuBar_1 = __importDefault(require("../layers/view/application/components/menubar/MenuBar"));
const ObjectManagerSelector_1 = __importDefault(require("../layers/view/application/components/objectmanagerselector/ObjectManagerSelector"));
const HorizontalRuler_1 = __importDefault(require("../layers/view/application/components/rulers/horizontalruler/HorizontalRuler"));
const VerticalRuler_1 = __importDefault(require("../layers/view/application/components/rulers/verticalruler/VerticalRuler"));
const HorizontalScrollBar_1 = __importDefault(require("../layers/view/application/components/scrollbars/horizontalscrollbar/HorizontalScrollBar"));
const VerticalScrollBar_1 = __importDefault(require("../layers/view/application/components/scrollbars/verticalscrollbar/VerticalScrollBar"));
const DrawingToolBar_1 = __importDefault(require("../layers/view/application/components/sidebars/drawingtoolbar/DrawingToolBar"));
const DrawingToolbarItem_1 = __importDefault(require("../layers/view/application/components/sidebars/drawingtoolbar/DrawingToolbarItem"));
const LeftSideBar_1 = __importDefault(require("../layers/view/application/components/sidebars/leftsidebar/LeftSideBar"));
const StatusBar_1 = __importDefault(require("../layers/view/application/components/statusbar/StatusBar"));
const TabPane_1 = __importDefault(require("../layers/view/application/components/tabpane/TabPane"));
const ToolBar_1 = __importDefault(require("../layers/view/application/components/toolbar/ToolBar"));
class ExtensionLoader {
    constructor() {
        this.extensionFileManager = new FileManagement_1.default();
    }
    load(extension, appContainer) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.extensionFileManager.open();
            const { fileContent: code } = (yield this.extensionFileManager.getFile(`${extension.id}/extension.min.ruigem`, 'metas')) || {
                fileContent: null,
            };
            if (!code) {
                console.error(`Could not load extension: ${extension.id}`);
            }
            return this.executor(code, appContainer);
        });
    }
    getExtension(id, builtin = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const extId = new ExtensionId_1.default(id);
            const res = (yield SharedFetcher_1.default.fetch(`${builtin ? RestEndpoints_1.BUILTIN_EXTENSION : RestEndpoints_1.EXTENSION}${extId.id}`));
            if (!res || !res.data || !res.data.status) {
                return null;
            }
            return res.data[constants_1.EXTENSION_SCRIPT];
        });
    }
    executor(code, appContainer) {
        const fn = new Function(constants_1.APPCONTAINER, 'BaseExtension', 'AppContainer', 'ActionBar', 'BaseComponent', 'ColorPalette', 'DrawingCanvas', 'DrawingToolBar', 'DrawingToolbarItem', 'HorizontalRuler', 'HorizontalScrollBar', 'MenuBar', 'ObjectManagerSelector', 'StatusBar', 'ToolBar', 'VerticalRuler', 'VerticalScrollBar', 'ConsoleCanvas', 'LeftSideBar', 'TabPane', 'ParserContainer', 'ContextMenu', 'registerElement', code);
        return fn(appContainer, BaseExtension_1.default, AppContainer_1.default, ActionBar_1.default, BaseComponent_1.default, ColorPalette_1.default, DrawingCanvas_1.default, DrawingToolBar_1.default, DrawingToolbarItem_1.default, HorizontalRuler_1.default, HorizontalScrollBar_1.default, MenuBar_1.default, ObjectManagerSelector_1.default, StatusBar_1.default, ToolBar_1.default, VerticalRuler_1.default, VerticalScrollBar_1.default, ConsoleCanvas_1.default, LeftSideBar_1.default, TabPane_1.default, ParserContainer_1.default, ContextMenu_1.default, customElementRegistration_1.registerElement);
    }
}
exports.default = ExtensionLoader;
//# sourceMappingURL=data:application/json;base64,