"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtensionState = void 0;
const SharedConfig_1 = __importDefault(require("../common/SharedConfig"));
const constants_1 = require("../common/constants");
const ExtensionLoader_1 = __importDefault(require("./ExtensionLoader"));
const builtinextensions_json_1 = __importDefault(require("../builtinextensions.json"));
const NullException_1 = __importDefault(require("../common/exceptions/NullException"));
var ExtensionState;
(function (ExtensionState) {
    ExtensionState["BUILTIN"] = "builtin";
    ExtensionState["ENABLE"] = "enable";
    ExtensionState["DISABLE"] = "disable";
    ExtensionState["INSTALL"] = "install";
    ExtensionState["MANUAL_INSTALL"] = "manualInstall";
})(ExtensionState = exports.ExtensionState || (exports.ExtensionState = {}));
class ExtensionPool {
    constructor(appContainer, load) {
        this.builtin = [];
        this.installed = {};
        this.enabled = {};
        this.disabled = {};
        this.manualInstalled = {};
        this.appContainer = appContainer;
        this.loader = new ExtensionLoader_1.default();
        this.init(load);
    }
    getEvent(id, eventType) {
        return new CustomEvent(eventType, {
            detail: { [constants_1.EXTENSION_EVENT_DATA]: id },
        });
    }
    dispatchEvent(id, eventType) {
        dispatchEvent(this.getEvent(id, eventType));
    }
    init(load) {
        return __awaiter(this, void 0, void 0, function* () {
            const installed = SharedConfig_1.default.getLocalData(constants_1.INSTALLED_EXTENSION);
            const enabled = SharedConfig_1.default.getLocalData(constants_1.ENABLED_EXTENSION);
            const disabled = SharedConfig_1.default.getLocalData(constants_1.DISABLED_EXTENSION);
            const manualInstalled = SharedConfig_1.default.getLocalData(constants_1.MANUAL_INSTALLED_EXTENSION);
            if (installed) {
                this.installed = installed;
            }
            if (enabled) {
                this.enabled = enabled;
            }
            if (disabled) {
                this.disabled = disabled;
            }
            if (manualInstalled) {
                this.manualInstalled = manualInstalled;
            }
            this.builtin = builtinextensions_json_1.default;
            if (!this.installed || Object.values(this.installed).length <= 0) {
                for (const id of this.builtin) {
                    this.install(id);
                }
            }
            this.loadExtension(load);
        });
    }
    loadExtension(load) {
        if (load && !this.appContainer) {
            throw new NullException_1.default('Cannot load extensions. App Container Object is null');
        }
        if (load) {
            for (const enabledExtension of Object.values(this.enabled)) {
                setTimeout(() => this.loader.load(enabledExtension, this.appContainer).then((_val) => {
                    console.log(_val);
                }), 1000);
            }
        }
    }
    install(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.installed[id]) {
                return false;
            }
            this.remove(id);
            const extension = (yield this.loader.getExtension(id));
            extension.builtin = this.builtin.some((extensionId) => id == extensionId);
            if (extension) {
                return false;
            }
            this.add(extension, ExtensionState.INSTALL, ExtensionState.ENABLE);
            this.dispatchEvent(id, constants_1.EVENT_EXTENSION_INSTALL);
            return true;
        });
    }
    manualInstall(extension) {
        this.remove(extension.id);
        this.add(extension, ExtensionState.MANUAL_INSTALL, ExtensionState.INSTALL, ExtensionState.ENABLE);
        this.dispatchEvent(extension.id, constants_1.EVENT_EXTENSION_MANUAL_INSTALL);
        return true;
    }
    uninstall(id) {
        const removed = this.remove(id);
        this.dispatchEvent(id, constants_1.EVENT_EXTENSION_UNINSTALL);
        return removed;
    }
    remove(id, ...states) {
        if (!states || states.length < 1) {
            this.delete(id, ExtensionState.DISABLE);
            this.delete(id, ExtensionState.ENABLE);
            this.delete(id, ExtensionState.INSTALL);
            this.delete(id, ExtensionState.MANUAL_INSTALL);
            SharedConfig_1.default.removeFromObjectLocalData(constants_1.INSTALLED_EXTENSION, id);
            SharedConfig_1.default.removeFromObjectLocalData(constants_1.ENABLED_EXTENSION, id);
            SharedConfig_1.default.removeFromObjectLocalData(constants_1.DISABLED_EXTENSION, id);
            SharedConfig_1.default.removeFromObjectLocalData(constants_1.MANUAL_INSTALLED_EXTENSION, id);
            return true;
        }
        for (const state of states) {
            switch (state) {
                case ExtensionState.DISABLE:
                    this.delete(id, ExtensionState.DISABLE);
                    return SharedConfig_1.default.removeFromObjectLocalData(constants_1.DISABLED_EXTENSION, id);
                    break;
                case ExtensionState.ENABLE:
                    this.delete(id, ExtensionState.ENABLE);
                    return SharedConfig_1.default.removeFromObjectLocalData(constants_1.ENABLED_EXTENSION, id);
                    break;
                case ExtensionState.INSTALL:
                    this.delete(id, ExtensionState.INSTALL);
                    return SharedConfig_1.default.removeFromObjectLocalData(constants_1.INSTALLED_EXTENSION, id);
                    break;
                case ExtensionState.MANUAL_INSTALL:
                    this.delete(id, ExtensionState.MANUAL_INSTALL);
                    return SharedConfig_1.default.removeFromObjectLocalData(constants_1.MANUAL_INSTALLED_EXTENSION, id);
                    break;
            }
        }
    }
    delete(id, state) {
        const extension = this.installed[id];
        if (!extension) {
            return false;
        }
        let deleted;
        switch (state) {
            case ExtensionState.DISABLE:
                deleted = { deleted: this.disabled[id] }.deleted;
                delete this.disabled[id];
                break;
            case ExtensionState.ENABLE:
                deleted = { deleted: this.disabled[id] }.deleted;
                delete this.enabled[id];
                break;
            case ExtensionState.INSTALL:
                deleted = { deleted: this.disabled[id] }.deleted;
                delete this.installed[id];
                break;
            case ExtensionState.MANUAL_INSTALL:
                deleted = { deleted: this.disabled[id] }.deleted;
                delete this.manualInstalled[id];
                break;
        }
        return deleted;
    }
    add(extension, ...states) {
        for (const state of states) {
            switch (state) {
                case ExtensionState.DISABLE:
                    SharedConfig_1.default.addToObjectLocalData(constants_1.DISABLED_EXTENSION, extension.id, extension);
                    this.disabled[extension.id] = extension;
                    break;
                case ExtensionState.ENABLE:
                    SharedConfig_1.default.addToObjectLocalData(constants_1.ENABLED_EXTENSION, extension.id, extension);
                    this.enabled[extension.id] = extension;
                    break;
                case ExtensionState.INSTALL:
                    SharedConfig_1.default.addToObjectLocalData(constants_1.INSTALLED_EXTENSION, extension.id, extension);
                    this.installed[extension.id] = extension;
                    break;
                case ExtensionState.MANUAL_INSTALL:
                    SharedConfig_1.default.addToObjectLocalData(constants_1.MANUAL_INSTALLED_EXTENSION, extension.id, extension);
                    this.installed[extension.id] = extension;
                    break;
            }
        }
    }
    enable(id) {
        const extension = this.installed[id];
        if (!extension) {
            return false;
        }
        this.remove(id, ExtensionState.DISABLE);
        this.add(extension, ExtensionState.ENABLE);
        this.dispatchEvent(id, constants_1.EVENT_EXTENSION_ENABLE);
        return true;
    }
    disable(id) {
        const extension = this.installed[id];
        if (!extension) {
            return false;
        }
        this.remove(id, ExtensionState.ENABLE);
        this.add(extension, ExtensionState.DISABLE);
        this.dispatchEvent(id, constants_1.EVENT_EXTENSION_DISABLE);
        return true;
    }
    isEnabled(id) {
        return !!this.enabled[id];
    }
    isDisabled(id) {
        return !!this.disabled[id];
    }
    isInstalled(id) {
        return !!this.installed[id];
    }
    isBuiltin(id) {
        var _a;
        return !!((_a = this.installed[id]) === null || _a === void 0 ? void 0 : _a.builtin);
    }
}
exports.default = ExtensionPool;
//# sourceMappingURL=data:application/json;base64,