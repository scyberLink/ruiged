import SharedConfig from '../common/SharedConfig';
import { INSTALLED_EXTENSION, ENABLED_EXTENSION, DISABLED_EXTENSION, EXTENSION_EVENT_DATA, EVENT_EXTENSION_DISABLE, EVENT_EXTENSION_ENABLE, EVENT_EXTENSION_INSTALL, EVENT_EXTENSION_MANUAL_INSTALL, EVENT_EXTENSION_UNINSTALL, MANUAL_INSTALLED_EXTENSION, } from '../common/constants';
import ExtensionLoader from './ExtensionLoader';
import builtinExtensions from '../builtinextensions.json';
import NullException from '../common/exceptions/NullException';
export var ExtensionState;
(function (ExtensionState) {
    ExtensionState["BUILTIN"] = "builtin";
    ExtensionState["ENABLE"] = "enable";
    ExtensionState["DISABLE"] = "disable";
    ExtensionState["INSTALL"] = "install";
    ExtensionState["MANUAL_INSTALL"] = "manualInstall";
})(ExtensionState || (ExtensionState = {}));
class ExtensionPool {
    appContainer;
    loader;
    builtin = [];
    installed = {};
    enabled = {};
    disabled = {};
    manualInstalled = {};
    constructor(appContainer, load) {
        this.appContainer = appContainer;
        this.loader = new ExtensionLoader();
        this.init(load);
    }
    getEvent(id, eventType) {
        return new CustomEvent(eventType, {
            detail: { [EXTENSION_EVENT_DATA]: id },
        });
    }
    dispatchEvent(id, eventType) {
        dispatchEvent(this.getEvent(id, eventType));
    }
    async init(load) {
        const installed = SharedConfig.getLocalData(INSTALLED_EXTENSION);
        const enabled = SharedConfig.getLocalData(ENABLED_EXTENSION);
        const disabled = SharedConfig.getLocalData(DISABLED_EXTENSION);
        const manualInstalled = SharedConfig.getLocalData(MANUAL_INSTALLED_EXTENSION);
        if (installed) {
            this.installed = installed;
        }
        if (enabled) {
            this.enabled = enabled;
        }
        if (disabled) {
            this.disabled = disabled;
        }
        if (manualInstalled) {
            this.manualInstalled = manualInstalled;
        }
        this.builtin = builtinExtensions;
        if (!this.installed || Object.values(this.installed).length <= 0) {
            for (const id of this.builtin) {
                this.install(id);
            }
        }
        this.loadExtension(load);
    }
    loadExtension(load) {
        if (load && !this.appContainer) {
            throw new NullException('Cannot load extensions. App Container Object is null');
        }
        if (load) {
            for (const enabledExtension of Object.values(this.enabled)) {
                this.loader.load(enabledExtension.code, this.appContainer);
            }
        }
    }
    async install(id) {
        if (this.installed[id]) {
            return false;
        }
        this.remove(id);
        const extension = (await this.loader.getExtension(id));
        extension.builtin = this.builtin.some((extensionId) => id == extensionId);
        if (extension) {
            return false;
        }
        this.add(extension, ExtensionState.INSTALL, ExtensionState.ENABLE);
        this.dispatchEvent(id, EVENT_EXTENSION_INSTALL);
        return true;
    }
    manualInstall(extension) {
        this.remove(extension.id);
        this.add(extension, ExtensionState.MANUAL_INSTALL, ExtensionState.INSTALL, ExtensionState.ENABLE);
        this.dispatchEvent(extension.id, EVENT_EXTENSION_MANUAL_INSTALL);
        return true;
    }
    uninstall(id) {
        const removed = this.remove(id);
        this.dispatchEvent(id, EVENT_EXTENSION_UNINSTALL);
        return removed;
    }
    remove(id, ...states) {
        if (!states || states.length < 1) {
            this.delete(id, ExtensionState.DISABLE);
            this.delete(id, ExtensionState.ENABLE);
            this.delete(id, ExtensionState.INSTALL);
            this.delete(id, ExtensionState.MANUAL_INSTALL);
            SharedConfig.removeFromObjectLocalData(INSTALLED_EXTENSION, id);
            SharedConfig.removeFromObjectLocalData(ENABLED_EXTENSION, id);
            SharedConfig.removeFromObjectLocalData(DISABLED_EXTENSION, id);
            SharedConfig.removeFromObjectLocalData(MANUAL_INSTALLED_EXTENSION, id);
            return true;
        }
        for (const state of states) {
            switch (state) {
                case ExtensionState.DISABLE:
                    this.delete(id, ExtensionState.DISABLE);
                    return SharedConfig.removeFromObjectLocalData(DISABLED_EXTENSION, id);
                    break;
                case ExtensionState.ENABLE:
                    this.delete(id, ExtensionState.ENABLE);
                    return SharedConfig.removeFromObjectLocalData(ENABLED_EXTENSION, id);
                    break;
                case ExtensionState.INSTALL:
                    this.delete(id, ExtensionState.INSTALL);
                    return SharedConfig.removeFromObjectLocalData(INSTALLED_EXTENSION, id);
                    break;
                case ExtensionState.MANUAL_INSTALL:
                    this.delete(id, ExtensionState.MANUAL_INSTALL);
                    return SharedConfig.removeFromObjectLocalData(MANUAL_INSTALLED_EXTENSION, id);
                    break;
            }
        }
    }
    delete(id, state) {
        const extension = this.installed[id];
        if (!extension) {
            return false;
        }
        let deleted;
        switch (state) {
            case ExtensionState.DISABLE:
                deleted = { deleted: this.disabled[id] }.deleted;
                delete this.disabled[id];
                break;
            case ExtensionState.ENABLE:
                deleted = { deleted: this.disabled[id] }.deleted;
                delete this.enabled[id];
                break;
            case ExtensionState.INSTALL:
                deleted = { deleted: this.disabled[id] }.deleted;
                delete this.installed[id];
                break;
            case ExtensionState.MANUAL_INSTALL:
                deleted = { deleted: this.disabled[id] }.deleted;
                delete this.manualInstalled[id];
                break;
        }
        return deleted;
    }
    add(extension, ...states) {
        for (const state of states) {
            switch (state) {
                case ExtensionState.DISABLE:
                    SharedConfig.addToObjectLocalData(DISABLED_EXTENSION, extension.id, extension);
                    this.disabled[extension.id] = extension;
                    break;
                case ExtensionState.ENABLE:
                    SharedConfig.addToObjectLocalData(ENABLED_EXTENSION, extension.id, extension);
                    this.enabled[extension.id] = extension;
                    break;
                case ExtensionState.INSTALL:
                    SharedConfig.addToObjectLocalData(INSTALLED_EXTENSION, extension.id, extension);
                    this.installed[extension.id] = extension;
                    break;
                case ExtensionState.MANUAL_INSTALL:
                    SharedConfig.addToObjectLocalData(MANUAL_INSTALLED_EXTENSION, extension.id, extension);
                    this.installed[extension.id] = extension;
                    break;
            }
        }
    }
    enable(id) {
        const extension = this.installed[id];
        if (!extension) {
            return false;
        }
        this.remove(id, ExtensionState.DISABLE);
        this.add(extension, ExtensionState.ENABLE);
        this.dispatchEvent(id, EVENT_EXTENSION_ENABLE);
        return true;
    }
    disable(id) {
        const extension = this.installed[id];
        if (!extension) {
            return false;
        }
        this.remove(id, ExtensionState.ENABLE);
        this.add(extension, ExtensionState.DISABLE);
        this.dispatchEvent(id, EVENT_EXTENSION_DISABLE);
        return true;
    }
    isEnabled(id) {
        return !!this.enabled[id];
    }
    isDisabled(id) {
        return !!this.disabled[id];
    }
    isInstalled(id) {
        return !!this.installed[id];
    }
    isBuiltin(id) {
        return !!this.installed[id]?.builtin;
    }
}
export default ExtensionPool;
//# sourceMappingURL=data:application/json;base64,