/* eslint-disable @typescript-eslint/no-explicit-any */
import SharedConfig from '../../../../common/SharedConfig';
import { ACTIVE_ELEMENT, DESIGN_ELEMENT_EVENT_DATA, EVENT_DESELECT, EVENT_SELECT } from '../../../../common/constants';
import DesignElementTypes from '../../common/DesignElementTypes';
import { createSVGElement } from '../../common/utils';
import BaseComponent from '../components/base/BaseComponent';
import Color from './Color';
class ActionableIcon extends BaseComponent {
    constructor(style, mode) {
        super({
            position: 'relative',
            width: '18px',
            height: '18px',
            border: '0',
            padding: '1px 2px',
            'border-radius': '5px',
            ...(style ?? {}),
        }, mode);
        this.hovered({
            background: `${Color.lightBlue}`,
        });
        this.setCursor('pointer');
        this.subscribe();
    }
    svgPathData;
    hint;
    description;
    init(init) {
        const { svgPathData, hint, description } = init;
        this.svgPathData = svgPathData;
        this.hint = hint;
        this.description = description;
        const svg = createSVGElement({ path: this.svgPathData });
        this.appendChild(svg);
        this.title = this.hint;
    }
    enable() {
        this.disabled = false;
    }
    disable() {
        this.disabled = true;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    action = (designElement) => { };
    subscribe() {
        window.addEventListener(EVENT_DESELECT, this.disableCheck);
        window.addEventListener(EVENT_SELECT, this.enableCheck);
        this.setAttribute('title', this.hint);
        //this.addClassNames(this.fontAwesomeSolidIcon, this.icon.includes(this.fontAwesome) ? this.icon : `${this.fontAwesome}${this.icon}`, this.fontAwesomeXtraSmallIcon)
    }
    /* notFontAwesomeIcon() {
          this.removeClassNames(this.fontAwesomeSolidIcon, `${this.fontAwesome}*`)
          this.addClassNames(this.icon)
      } */
    disableCheck(ev) {
        ev?.preventDefault();
        this.disable();
    }
    enableCheck(ev) {
        ev?.preventDefault();
        const { [DESIGN_ELEMENT_EVENT_DATA]: designElement } = ev?.detail;
        if (designElement) {
            const designType = designElement.type;
            if (this.isTypeSupported(designType)) {
                return this.enable();
            }
        }
        this.disable();
    }
    isTypeSupported(type) {
        if (this.supportedDesignElements == DesignElementTypes.All) {
            return true;
        }
        for (const designType of this.supportedDesignElements) {
            if (designType === type) {
                return true;
            }
        }
        return false;
    }
    onclick = (event) => {
        event?.preventDefault();
        const activeElement = SharedConfig.get(ACTIVE_ELEMENT);
        this.action(activeElement);
    };
}
export default ActionableIcon;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0aW9uYWJsZUljb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGF5ZXJzL3ZpZXcvYXBwbGljYXRpb24vY29tbW9uL0FjdGlvbmFibGVJY29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVEQUF1RDtBQUN2RCxPQUFPLFlBQVksTUFBTSxpQ0FBaUMsQ0FBQTtBQUMxRCxPQUFPLEVBQUUsY0FBYyxFQUFFLHlCQUF5QixFQUFFLGNBQWMsRUFBRSxZQUFZLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUV0SCxPQUFPLGtCQUFrQixNQUFNLGlDQUFpQyxDQUFBO0FBQ2hFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRXJELE9BQU8sYUFBYSxNQUFNLGtDQUFrQyxDQUFBO0FBQzVELE9BQU8sS0FBSyxNQUFNLFNBQVMsQ0FBQTtBQUkzQixNQUFlLGNBQWUsU0FBUSxhQUFhO0lBQ2pELFlBQVksS0FBa0IsRUFBRSxJQUFpQjtRQUMvQyxLQUFLLENBQ0g7WUFDRSxRQUFRLEVBQUUsVUFBVTtZQUNwQixLQUFLLEVBQUUsTUFBTTtZQUNiLE1BQU0sRUFBRSxNQUFNO1lBQ2QsTUFBTSxFQUFFLEdBQUc7WUFDWCxPQUFPLEVBQUUsU0FBUztZQUNsQixlQUFlLEVBQUUsS0FBSztZQUN0QixHQUFHLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztTQUNqQixFQUNELElBQUksQ0FDTCxDQUFBO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNYLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUU7U0FDakMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUV6QixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDbEIsQ0FBQztJQUVELFdBQVcsQ0FBUztJQUNwQixJQUFJLENBQVM7SUFDYixXQUFXLENBQVM7SUFFcEIsSUFBSSxDQUFDLElBQWlCO1FBQ3BCLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQTtRQUMvQyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQTtRQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNoQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQTtRQUM5QixNQUFNLEdBQUcsR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQTtRQUN4RCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQTtJQUN4QixDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFBO0lBQ3ZCLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUE7SUFDdEIsQ0FBQztJQUlELDZEQUE2RDtJQUM3RCxNQUFNLEdBQUcsQ0FBQyxhQUE0QixFQUFFLEVBQUUsR0FBRSxDQUFDLENBQUE7SUFFN0MsU0FBUztRQUNQLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQzFELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3ZELElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNyQyxvS0FBb0s7SUFDdEssQ0FBQztJQUVEOzs7VUFHTTtJQUVOLFlBQVksQ0FBQyxFQUFPO1FBQ2xCLEVBQUUsRUFBRSxjQUFjLEVBQUUsQ0FBQTtRQUNwQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDaEIsQ0FBQztJQUVELFdBQVcsQ0FBQyxFQUFPO1FBQ2pCLEVBQUUsRUFBRSxjQUFjLEVBQUUsQ0FBQTtRQUNwQixNQUFNLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLGFBQWEsRUFBRSxHQUFHLEVBQUUsRUFBRSxNQUF3QyxDQUFBO1FBRW5HLElBQUksYUFBYSxFQUFFO1lBQ2pCLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUE7WUFDckMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNwQyxPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTthQUNyQjtTQUNGO1FBQ0QsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ2hCLENBQUM7SUFFRCxlQUFlLENBQUMsSUFBeUI7UUFDdkMsSUFBSSxJQUFJLENBQUMsdUJBQXVCLElBQUksa0JBQWtCLENBQUMsR0FBRyxFQUFFO1lBQzFELE9BQU8sSUFBSSxDQUFBO1NBQ1o7UUFDRCxLQUFLLE1BQU0sVUFBVSxJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtZQUNyRCxJQUFJLFVBQVUsS0FBSyxJQUFJLEVBQUU7Z0JBQ3ZCLE9BQU8sSUFBSSxDQUFBO2FBQ1o7U0FDRjtRQUNELE9BQU8sS0FBSyxDQUFBO0lBQ2QsQ0FBQztJQUVELE9BQU8sR0FBRyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtRQUM5QixLQUFLLEVBQUUsY0FBYyxFQUFFLENBQUE7UUFDdkIsTUFBTSxhQUFhLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQVEsQ0FBQTtRQUM3RCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQzVCLENBQUMsQ0FBQTtDQUNGO0FBRUQsZUFBZSxjQUFjLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgU2hhcmVkQ29uZmlnIGZyb20gJy4uLy4uLy4uLy4uL2NvbW1vbi9TaGFyZWRDb25maWcnXG5pbXBvcnQgeyBBQ1RJVkVfRUxFTUVOVCwgREVTSUdOX0VMRU1FTlRfRVZFTlRfREFUQSwgRVZFTlRfREVTRUxFQ1QsIEVWRU5UX1NFTEVDVCB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbW1vbi9jb25zdGFudHMnXG5pbXBvcnQgSUFueU9iamVjdCBmcm9tICcuLi8uLi8uLi8uLi9jb21tb24vbW9kZWxzL0lBbnlPYmplY3QnXG5pbXBvcnQgRGVzaWduRWxlbWVudFR5cGVzIGZyb20gJy4uLy4uL2NvbW1vbi9EZXNpZ25FbGVtZW50VHlwZXMnXG5pbXBvcnQgeyBjcmVhdGVTVkdFbGVtZW50IH0gZnJvbSAnLi4vLi4vY29tbW9uL3V0aWxzJ1xuaW1wb3J0IERlc2lnbkVsZW1lbnQsIHsgREVTSUdOX0VMRU1FTlRfRVZFTlRfREFUQV9UWVBFIH0gZnJvbSAnLi4vLi4vZGVzaWduL0Rlc2lnbkVsZW1lbnQnXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnRzL2Jhc2UvQmFzZUNvbXBvbmVudCdcbmltcG9ydCBDb2xvciBmcm9tICcuL0NvbG9yJ1xuaW1wb3J0IElBY3Rpb24sIHsgSUFjdGlvbkluaXQgfSBmcm9tICcuL0lBY3Rpb24nXG5pbXBvcnQgU2hhZG93TW9kZSBmcm9tICcuL1NoYWRvd01vZGUnXG5cbmFic3RyYWN0IGNsYXNzIEFjdGlvbmFibGVJY29uIGV4dGVuZHMgQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIElBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihzdHlsZT86IElBbnlPYmplY3QsIG1vZGU/OiBTaGFkb3dNb2RlKSB7XG4gICAgc3VwZXIoXG4gICAgICB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICB3aWR0aDogJzE4cHgnLFxuICAgICAgICBoZWlnaHQ6ICcxOHB4JyxcbiAgICAgICAgYm9yZGVyOiAnMCcsXG4gICAgICAgIHBhZGRpbmc6ICcxcHggMnB4JyxcbiAgICAgICAgJ2JvcmRlci1yYWRpdXMnOiAnNXB4JyxcbiAgICAgICAgLi4uKHN0eWxlID8/IHt9KSxcbiAgICAgIH0sXG4gICAgICBtb2RlLFxuICAgIClcblxuICAgIHRoaXMuaG92ZXJlZCh7XG4gICAgICBiYWNrZ3JvdW5kOiBgJHtDb2xvci5saWdodEJsdWV9YCxcbiAgICB9KVxuXG4gICAgdGhpcy5zZXRDdXJzb3IoJ3BvaW50ZXInKVxuXG4gICAgdGhpcy5zdWJzY3JpYmUoKVxuICB9XG5cbiAgc3ZnUGF0aERhdGEhOiBzdHJpbmdcbiAgaGludCE6IHN0cmluZ1xuICBkZXNjcmlwdGlvbiE6IHN0cmluZ1xuXG4gIGluaXQoaW5pdDogSUFjdGlvbkluaXQpIHtcbiAgICBjb25zdCB7IHN2Z1BhdGhEYXRhLCBoaW50LCBkZXNjcmlwdGlvbiB9ID0gaW5pdFxuICAgIHRoaXMuc3ZnUGF0aERhdGEgPSBzdmdQYXRoRGF0YVxuICAgIHRoaXMuaGludCA9IGhpbnRcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb25cbiAgICBjb25zdCBzdmcgPSBjcmVhdGVTVkdFbGVtZW50KHsgcGF0aDogdGhpcy5zdmdQYXRoRGF0YSB9KVxuICAgIHRoaXMuYXBwZW5kQ2hpbGQoc3ZnKVxuICAgIHRoaXMudGl0bGUgPSB0aGlzLmhpbnRcbiAgfVxuXG4gIGVuYWJsZSgpIHtcbiAgICB0aGlzLmRpc2FibGVkID0gZmFsc2VcbiAgfVxuXG4gIGRpc2FibGUoKSB7XG4gICAgdGhpcy5kaXNhYmxlZCA9IHRydWVcbiAgfVxuXG4gIGFic3RyYWN0IHN1cHBvcnRlZERlc2lnbkVsZW1lbnRzOiBEZXNpZ25FbGVtZW50VHlwZXMgfCBEZXNpZ25FbGVtZW50VHlwZXNbXVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgYWN0aW9uID0gKGRlc2lnbkVsZW1lbnQ6IERlc2lnbkVsZW1lbnQpID0+IHt9XG5cbiAgc3Vic2NyaWJlKCk6IHZvaWQge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEVWRU5UX0RFU0VMRUNULCB0aGlzLmRpc2FibGVDaGVjaylcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihFVkVOVF9TRUxFQ1QsIHRoaXMuZW5hYmxlQ2hlY2spXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgdGhpcy5oaW50KVxuICAgIC8vdGhpcy5hZGRDbGFzc05hbWVzKHRoaXMuZm9udEF3ZXNvbWVTb2xpZEljb24sIHRoaXMuaWNvbi5pbmNsdWRlcyh0aGlzLmZvbnRBd2Vzb21lKSA/IHRoaXMuaWNvbiA6IGAke3RoaXMuZm9udEF3ZXNvbWV9JHt0aGlzLmljb259YCwgdGhpcy5mb250QXdlc29tZVh0cmFTbWFsbEljb24pXG4gIH1cblxuICAvKiBub3RGb250QXdlc29tZUljb24oKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQ2xhc3NOYW1lcyh0aGlzLmZvbnRBd2Vzb21lU29saWRJY29uLCBgJHt0aGlzLmZvbnRBd2Vzb21lfSpgKVxuICAgICAgICB0aGlzLmFkZENsYXNzTmFtZXModGhpcy5pY29uKVxuICAgIH0gKi9cblxuICBkaXNhYmxlQ2hlY2soZXY6IGFueSkge1xuICAgIGV2Py5wcmV2ZW50RGVmYXVsdCgpXG4gICAgdGhpcy5kaXNhYmxlKClcbiAgfVxuXG4gIGVuYWJsZUNoZWNrKGV2OiBhbnkpIHtcbiAgICBldj8ucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IHsgW0RFU0lHTl9FTEVNRU5UX0VWRU5UX0RBVEFdOiBkZXNpZ25FbGVtZW50IH0gPSBldj8uZGV0YWlsIGFzIERFU0lHTl9FTEVNRU5UX0VWRU5UX0RBVEFfVFlQRVxuXG4gICAgaWYgKGRlc2lnbkVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGRlc2lnblR5cGUgPSBkZXNpZ25FbGVtZW50LnR5cGVcbiAgICAgIGlmICh0aGlzLmlzVHlwZVN1cHBvcnRlZChkZXNpZ25UeXBlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmFibGUoKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmRpc2FibGUoKVxuICB9XG5cbiAgaXNUeXBlU3VwcG9ydGVkKHR5cGU/OiBEZXNpZ25FbGVtZW50VHlwZXMpIHtcbiAgICBpZiAodGhpcy5zdXBwb3J0ZWREZXNpZ25FbGVtZW50cyA9PSBEZXNpZ25FbGVtZW50VHlwZXMuQWxsKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGRlc2lnblR5cGUgb2YgdGhpcy5zdXBwb3J0ZWREZXNpZ25FbGVtZW50cykge1xuICAgICAgaWYgKGRlc2lnblR5cGUgPT09IHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBvbmNsaWNrID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgZXZlbnQ/LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gU2hhcmVkQ29uZmlnLmdldChBQ1RJVkVfRUxFTUVOVCkgYXMgYW55XG4gICAgdGhpcy5hY3Rpb24oYWN0aXZlRWxlbWVudClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBY3Rpb25hYmxlSWNvblxuIl19