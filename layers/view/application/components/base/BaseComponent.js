/* eslint-disable @typescript-eslint/no-explicit-any */
import NullException from '../../../../../common/exceptions/NullException';
import { cssString, snakeCase } from '../../../../../common/utils';
import Color from '../../common/Color';
import ShadowMode from '../../common/ShadowMode';
import InvalidTagNameException from '../exceptions/InvalidTagNameException';
class BaseComponent extends HTMLElement {
    shadow;
    shadowWrapper;
    shadowStyle;
    _scale = 1;
    _rotate = 0;
    get rotate() {
        return this._rotate;
    }
    set rotate(value) {
        this._rotate = value;
        this.style.rotate = `${value}deg`;
    }
    get scale() {
        return this._scale;
    }
    set scale(value) {
        this._scale = value;
        this.style.transform = `scale(${value})`;
    }
    constructor(style, mode) {
        super();
        this.shadow = this.attachShadow({ mode: mode ?? ShadowMode.CLOSE });
        this.shadowWrapper = document.createElement('div');
        this.shadowStyle = document.createElement('style');
        this.id = `${this.tagName?.toLowerCase()}`;
        this.shadowStyle.textContent = `
    #${this.tagName?.toLowerCase()} {
        ${cssString({
            background: Color.lightAsh,
            color: Color.black,
            border: `0.5px solid ${Color.ash}`,
            display: 'block',
            position: 'fixed',
            'user-select': 'none',
            ...(style ?? {}),
        })}
      }
    `;
        this.shadow.appendChild(this.shadowWrapper);
        this.shadow.appendChild(this.shadowStyle);
    }
    removeChild(child) {
        return this.shadowWrapper.removeChild(child);
    }
    // Delegate properties and methods to the shadowWrapper
    get accessKey() {
        return this.shadowWrapper.accessKey;
    }
    set accessKey(value) {
        this.shadowWrapper.accessKey = value;
    }
    get attributes() {
        return this.shadowWrapper.attributes;
    }
    get classList() {
        return this.shadowWrapper.classList;
    }
    get className() {
        return this.shadowWrapper.className;
    }
    set className(value) {
        this.shadowWrapper.className = value;
    }
    get contentEditable() {
        return this.shadowWrapper.contentEditable;
    }
    set contentEditable(value) {
        this.shadowWrapper.contentEditable = value;
    }
    get clientWidth() {
        return this.shadowWrapper.clientWidth;
    }
    set clientWidth(value) {
        ;
        this.shadowWrapper.clientWidth = value;
    }
    get clientHeight() {
        return this.shadowWrapper.clientHeight;
    }
    set clientHeight(value) {
        ;
        this.shadowWrapper.clientHeight = value;
    }
    get innerText() {
        return this.shadowWrapper.innerText;
    }
    set innerText(value) {
        this.shadowWrapper.innerText = value;
    }
    get innerHTML() {
        return this.shadowWrapper.innerHTML;
    }
    set innerHTML(value) {
        this.shadowWrapper.innerHTML = value;
    }
    get dataset() {
        return this.shadowWrapper.dataset;
    }
    get dir() {
        return this.shadowWrapper.dir;
    }
    appendChildren(...children) {
        for (const child of children) {
            this.appendChild(child);
        }
    }
    set dir(value) {
        this.shadowWrapper.dir = value;
    }
    get draggable() {
        return this.shadowWrapper.draggable;
    }
    set draggable(value) {
        this.shadowWrapper.draggable = value;
    }
    get hidden() {
        return this.shadowWrapper.hidden;
    }
    set hidden(value) {
        this.shadowWrapper.hidden = value;
    }
    get id() {
        return this.shadowWrapper.id;
    }
    set id(value) {
        this.shadowWrapper.id = value;
    }
    get textContent() {
        return this.shadowWrapper.textContent;
    }
    set textContent(value) {
        this.shadowWrapper.textContent = value;
    }
    get lang() {
        return this.shadowWrapper.lang;
    }
    set lang(value) {
        this.shadowWrapper.lang = value;
    }
    get offsetHeight() {
        return this.shadowWrapper.offsetHeight;
    }
    get offsetLeft() {
        return this.shadowWrapper.offsetLeft;
    }
    get offsetParent() {
        return this.shadowWrapper.offsetParent;
    }
    get offsetTop() {
        return this.shadowWrapper.offsetTop;
    }
    get offsetWidth() {
        return this.shadowWrapper.offsetWidth;
    }
    get disabled() {
        return this.getDisable();
    }
    set disabled(value) {
        this.setDisable(value);
    }
    getDisable() {
        return this.shadowWrapper.hasAttribute('disabled');
    }
    appendChild(node) {
        return this.shadowWrapper.appendChild(node);
    }
    setDisable(value) {
        if (value) {
            this.shadowWrapper.setAttribute('disabled', '');
        }
        else {
            this.shadowWrapper.removeAttribute('disabled');
        }
    }
    get style() {
        return this.shadowWrapper.style;
    }
    get tabIndex() {
        return this.shadowWrapper.tabIndex;
    }
    set tabIndex(value) {
        this.shadowWrapper.tabIndex = value;
    }
    get title() {
        return this.shadowWrapper.title;
    }
    set title(value) {
        this.shadowWrapper.title = value;
    }
    set onselect(value) { }
    oncopy = (ev) => {
        ev?.preventDefault();
    };
    oncut = (ev) => {
        ev?.preventDefault();
    };
    onpaste = (ev) => {
        ev?.preventDefault();
    };
    onresize = (ev) => {
        ev?.preventDefault();
    };
    onwheel = (ev) => {
        ev?.preventDefault();
    };
    ondragover = (event) => {
        event.preventDefault();
    };
    ondrop = (event) => {
        event.preventDefault();
    };
    // ... (other delegated methods)
    addEventListener(type, listener, options) {
        this.shadowWrapper.addEventListener(type, listener, options);
    }
    getBoundingClientRect() {
        return this.shadowWrapper.getBoundingClientRect();
    }
    append(...nodes) {
        this.shadowWrapper.append(...nodes);
    }
    blur() {
        this.shadowWrapper.blur();
    }
    click() {
        this.shadowWrapper.click();
    }
    oncontextmenu = (e) => {
        e?.preventDefault();
    };
    closest(selectors) {
        return this.shadowWrapper.closest(selectors);
    }
    dispatchEvent(event) {
        return this.shadowWrapper.dispatchEvent(event);
    }
    focus(options) {
        this.shadowWrapper.focus(options);
    }
    getAttribute(name) {
        return this.shadowWrapper.getAttribute(name);
    }
    getAttributeNS(namespaceURI, localName) {
        return this.shadowWrapper.getAttributeNS(namespaceURI, localName);
    }
    getAttributeNode(name) {
        return this.shadowWrapper.getAttributeNode(name);
    }
    getAttributeNodeNS(namespaceURI, localName) {
        return this.shadowWrapper.getAttributeNodeNS(namespaceURI, localName);
    }
    hasAttribute(name) {
        return this.shadowWrapper.hasAttribute(name);
    }
    hasAttributeNS(namespaceURI, localName) {
        return this.shadowWrapper.hasAttributeNS(namespaceURI, localName);
    }
    hasAttributes() {
        return this.shadowWrapper.hasAttributes();
    }
    insertAdjacentElement(position, insertedElement) {
        return this.shadowWrapper.insertAdjacentElement(position, insertedElement);
    }
    insertAdjacentHTML(position, text) {
        this.shadowWrapper.insertAdjacentHTML(position, text);
    }
    insertAdjacentText(position, text) {
        this.shadowWrapper.insertAdjacentText(position, text);
    }
    removeAttribute(name) {
        this.shadowWrapper.removeAttribute(name);
    }
    removeAttributeNS(namespaceURI, localName) {
        this.shadowWrapper.removeAttributeNS(namespaceURI, localName);
    }
    removeAttributeNode(attr) {
        return this.shadowWrapper.removeAttributeNode(attr);
    }
    removeEventListener(type, listener, options) {
        this.shadowWrapper.removeEventListener(type, listener, options);
    }
    setAttribute(name, value) {
        this.shadowWrapper.setAttribute(name, value);
    }
    setAttributeNS(namespaceURI, qualifiedName, value) {
        this.shadowWrapper.setAttributeNS(namespaceURI, qualifiedName, value);
    }
    setAttributeNode(attr) {
        return this.shadowWrapper.setAttributeNode(attr);
    }
    setAttributeNodeNS(attr) {
        return this.shadowWrapper.setAttributeNodeNS(attr);
    }
    toggleAttribute(qualifiedName, force) {
        return this.shadowWrapper.toggleAttribute(qualifiedName, force);
    }
    getShadowWrapper() {
        return this.shadowWrapper;
    }
    addStyle(style) {
        let styleString = '';
        let previousStyle = this.shadowStyle.textContent ?? '';
        if (typeof style === 'string') {
            styleString = style;
            this.shadowStyle.textContent = previousStyle + styleString;
        }
        else if (!Array.isArray(style)) {
            styleString = `${cssString(style)}`;
            const startOfThisIdStyle = `#${this.id} {`;
            previousStyle = previousStyle.replace(startOfThisIdStyle, `${startOfThisIdStyle}${styleString}`);
            this.shadowStyle.textContent = previousStyle;
        }
        else if (Array.isArray(style)) {
            for (const styleI of style) {
                styleString = styleString?.concat('\n\n', styleI);
            }
            this.shadowStyle.textContent = previousStyle + styleString;
        }
        return this.shadowStyle;
    }
    addPseudoClass(clazz, style) {
        if (!clazz) {
            throw new NullException('Pseudo Class name not provided');
        }
        if (!style) {
            throw new NullException('Pseudo Class style not provided');
        }
        if (!clazz.includes(':')) {
            clazz = `:${clazz}`;
        }
        clazz = `${this.id}${clazz}`;
        this.addStyle(`#${clazz}{${cssString(style)}}`);
    }
    hovered(style) {
        this.addPseudoClass('hover', style);
    }
    setCursor(name) {
        import(`../../../../../assets/raws/cursor/${name}.svg`)
            .then(({ default: cursor }) => {
            this.style.cursor = `url(${cursor}), auto`;
        })
            .catch((error) => {
            console.error('Failed to load cursor:', error);
        });
    }
    addInlineStyle({ name, value }) {
        this.shadowWrapper.style[name] = value;
    }
    addClassNames(...classNames) {
        this.shadowWrapper.classList.add(...classNames);
    }
    removeClassNames(...classNames) {
        this.shadowWrapper.classList.remove(...classNames);
    }
    replaceClassName(oldClassName, newClassName) {
        return this.shadowWrapper.classList.replace(oldClassName, newClassName);
    }
    static register(element) {
        if (!element) {
            throw new InvalidTagNameException();
        }
        const tagName = snakeCase(element.name);
        try {
            customElements.define(tagName, element);
        }
        catch (error) {
            console.warn(error.message);
        }
        return element;
    }
    setScale(scale) {
        this.scale = scale;
    }
}
export default BaseComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZUNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9sYXllcnMvdmlldy9hcHBsaWNhdGlvbi9jb21wb25lbnRzL2Jhc2UvQmFzZUNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1REFBdUQ7QUFDdkQsT0FBTyxhQUFhLE1BQU0sZ0RBQWdELENBQUE7QUFHMUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUNsRSxPQUFPLEtBQUssTUFBTSxvQkFBb0IsQ0FBQTtBQUN0QyxPQUFPLFVBQVUsTUFBTSx5QkFBeUIsQ0FBQTtBQUNoRCxPQUFPLHVCQUF1QixNQUFNLHVDQUF1QyxDQUFBO0FBRzNFLE1BQU0sYUFBYyxTQUFRLFdBQVc7SUFDM0IsTUFBTSxDQUFZO0lBQ2xCLGFBQWEsQ0FBYTtJQUMxQixXQUFXLENBQWtCO0lBQy9CLE1BQU0sR0FBVyxDQUFDLENBQUE7SUFDbEIsT0FBTyxHQUFXLENBQUMsQ0FBQTtJQUUzQixJQUFXLE1BQU07UUFDZixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDckIsQ0FBQztJQUVELElBQVcsTUFBTSxDQUFDLEtBQWE7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUE7UUFDcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxLQUFLLEtBQUssQ0FBQTtJQUNuQyxDQUFDO0lBRUQsSUFBVyxLQUFLO1FBQ2QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBQ3BCLENBQUM7SUFFRCxJQUFXLEtBQUssQ0FBQyxLQUFhO1FBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO1FBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsS0FBSyxHQUFHLENBQUE7SUFDMUMsQ0FBQztJQUVELFlBQVksS0FBa0IsRUFBRSxJQUFpQjtRQUMvQyxL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T0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7U0FDNUI7UUFDRCxPQUFPLE9BQU8sQ0FBQTtJQUNoQixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDcEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7SUFDcEIsQ0FBQztDQUNGO0FBRUQsZUFBZSxhQUFhLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgTnVsbEV4Y2VwdGlvbiBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb21tb24vZXhjZXB0aW9ucy9OdWxsRXhjZXB0aW9uJ1xuaW1wb3J0IHR5cGUgSUFueU9iamVjdCBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb21tb24vbW9kZWxzL0lBbnlPYmplY3QnXG5pbXBvcnQgdHlwZSBJUGFpciBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb21tb24vbW9kZWxzL0lQYWlyJ1xuaW1wb3J0IHsgY3NzU3RyaW5nLCBzbmFrZUNhc2UgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb21tb24vdXRpbHMnXG5pbXBvcnQgQ29sb3IgZnJvbSAnLi4vLi4vY29tbW9uL0NvbG9yJ1xuaW1wb3J0IFNoYWRvd01vZGUgZnJvbSAnLi4vLi4vY29tbW9uL1NoYWRvd01vZGUnXG5pbXBvcnQgSW52YWxpZFRhZ05hbWVFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9ucy9JbnZhbGlkVGFnTmFtZUV4Y2VwdGlvbidcbmltcG9ydCB0eXBlIElEZWxlZ2F0ZU1vZGVsIGZyb20gJy4vSURlbGVnYXRlTW9kZWwnXG5cbmNsYXNzIEJhc2VDb21wb25lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCBpbXBsZW1lbnRzIElEZWxlZ2F0ZU1vZGVsIHtcbiAgcHJvdGVjdGVkIHNoYWRvdzogU2hhZG93Um9vdFxuICBwcm90ZWN0ZWQgc2hhZG93V3JhcHBlcjogSFRNTEVsZW1lbnRcbiAgcHJvdGVjdGVkIHNoYWRvd1N0eWxlOiBIVE1MU3R5bGVFbGVtZW50XG4gIHByaXZhdGUgX3NjYWxlOiBudW1iZXIgPSAxXG4gIHByaXZhdGUgX3JvdGF0ZTogbnVtYmVyID0gMFxuXG4gIHB1YmxpYyBnZXQgcm90YXRlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3JvdGF0ZVxuICB9XG5cbiAgcHVibGljIHNldCByb3RhdGUodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3JvdGF0ZSA9IHZhbHVlXG4gICAgdGhpcy5zdHlsZS5yb3RhdGUgPSBgJHt2YWx1ZX1kZWdgXG4gIH1cblxuICBwdWJsaWMgZ2V0IHNjYWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NjYWxlXG4gIH1cblxuICBwdWJsaWMgc2V0IHNjYWxlKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9zY2FsZSA9IHZhbHVlXG4gICAgdGhpcy5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGUoJHt2YWx1ZX0pYFxuICB9XG5cbiAgY29uc3RydWN0b3Ioc3R5bGU/OiBJQW55T2JqZWN0LCBtb2RlPzogU2hhZG93TW9kZSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogbW9kZSA/PyBTaGFkb3dNb2RlLkNMT1NFIH0pXG4gICAgdGhpcy5zaGFkb3dXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB0aGlzLnNoYWRvd1N0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxuICAgIHRoaXMuaWQgPSBgJHt0aGlzLnRhZ05hbWU/LnRvTG93ZXJDYXNlKCl9YFxuICAgIHRoaXMuc2hhZG93U3R5bGUudGV4dENvbnRlbnQgPSBgXG4gICAgIyR7dGhpcy50YWdOYW1lPy50b0xvd2VyQ2FzZSgpfSB7XG4gICAgICAgICR7Y3NzU3RyaW5nKHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiBDb2xvci5saWdodEFzaCxcbiAgICAgICAgICBjb2xvcjogQ29sb3IuYmxhY2ssXG4gICAgICAgICAgYm9yZGVyOiBgMC41cHggc29saWQgJHtDb2xvci5hc2h9YCxcbiAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICAgICd1c2VyLXNlbGVjdCc6ICdub25lJyxcbiAgICAgICAgICAuLi4oc3R5bGUgPz8ge30pLFxuICAgICAgICB9KX1cbiAgICAgIH1cbiAgICBgXG4gICAgdGhpcy5zaGFkb3cuYXBwZW5kQ2hpbGQodGhpcy5zaGFkb3dXcmFwcGVyKVxuICAgIHRoaXMuc2hhZG93LmFwcGVuZENoaWxkKHRoaXMuc2hhZG93U3R5bGUpXG4gIH1cblxuICByZW1vdmVDaGlsZDxUIGV4dGVuZHMgTm9kZT4oY2hpbGQ6IFQpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLnJlbW92ZUNoaWxkKGNoaWxkKVxuICB9XG5cbiAgLy8gRGVsZWdhdGUgcHJvcGVydGllcyBhbmQgbWV0aG9kcyB0byB0aGUgc2hhZG93V3JhcHBlclxuXG4gIGdldCBhY2Nlc3NLZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLmFjY2Vzc0tleVxuICB9XG5cbiAgc2V0IGFjY2Vzc0tleSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5zaGFkb3dXcmFwcGVyLmFjY2Vzc0tleSA9IHZhbHVlXG4gIH1cblxuICBnZXQgYXR0cmlidXRlcygpOiBOYW1lZE5vZGVNYXAge1xuICAgIHJldHVybiB0aGlzLnNoYWRvd1dyYXBwZXIuYXR0cmlidXRlc1xuICB9XG5cbiAgZ2V0IGNsYXNzTGlzdCgpOiBET01Ub2tlbkxpc3Qge1xuICAgIHJldHVybiB0aGlzLnNoYWRvd1dyYXBwZXIuY2xhc3NMaXN0XG4gIH1cblxuICBnZXQgY2xhc3NOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci5jbGFzc05hbWVcbiAgfVxuXG4gIHNldCBjbGFzc05hbWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuc2hhZG93V3JhcHBlci5jbGFzc05hbWUgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IGNvbnRlbnRFZGl0YWJsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnNoYWRvd1dyYXBwZXIuY29udGVudEVkaXRhYmxlXG4gIH1cblxuICBzZXQgY29udGVudEVkaXRhYmxlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNoYWRvd1dyYXBwZXIuY29udGVudEVkaXRhYmxlID0gdmFsdWVcbiAgfVxuXG4gIGdldCBjbGllbnRXaWR0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNoYWRvd1dyYXBwZXIuY2xpZW50V2lkdGhcbiAgfVxuXG4gIHNldCBjbGllbnRXaWR0aCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgOyh0aGlzLnNoYWRvd1dyYXBwZXIgYXMgYW55KS5jbGllbnRXaWR0aCA9IHZhbHVlXG4gIH1cblxuICBnZXQgY2xpZW50SGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci5jbGllbnRIZWlnaHRcbiAgfVxuXG4gIHNldCBjbGllbnRIZWlnaHQodmFsdWU6IG51bWJlcikge1xuICAgIDsodGhpcy5zaGFkb3dXcmFwcGVyIGFzIGFueSkuY2xpZW50SGVpZ2h0ID0gdmFsdWVcbiAgfVxuXG4gIGdldCBpbm5lclRleHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLmlubmVyVGV4dFxuICB9XG5cbiAgc2V0IGlubmVyVGV4dCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5zaGFkb3dXcmFwcGVyLmlubmVyVGV4dCA9IHZhbHVlXG4gIH1cblxuICBnZXQgaW5uZXJIVE1MKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci5pbm5lckhUTUxcbiAgfVxuXG4gIHNldCBpbm5lckhUTUwodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuc2hhZG93V3JhcHBlci5pbm5lckhUTUwgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IGRhdGFzZXQoKTogRE9NU3RyaW5nTWFwIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLmRhdGFzZXRcbiAgfVxuXG4gIGdldCBkaXIoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLmRpclxuICB9XG5cbiAgYXBwZW5kQ2hpbGRyZW4oLi4uY2hpbGRyZW46IEhUTUxFbGVtZW50W10pIHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICB0aGlzLmFwcGVuZENoaWxkKGNoaWxkKVxuICAgIH1cbiAgfVxuXG4gIHNldCBkaXIodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuc2hhZG93V3JhcHBlci5kaXIgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IGRyYWdnYWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLmRyYWdnYWJsZVxuICB9XG5cbiAgc2V0IGRyYWdnYWJsZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuc2hhZG93V3JhcHBlci5kcmFnZ2FibGUgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IGhpZGRlbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLmhpZGRlblxuICB9XG5cbiAgc2V0IGhpZGRlbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuc2hhZG93V3JhcHBlci5oaWRkZW4gPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci5pZFxuICB9XG5cbiAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNoYWRvd1dyYXBwZXIuaWQgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IHRleHRDb250ZW50KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci50ZXh0Q29udGVudCFcbiAgfVxuXG4gIHNldCB0ZXh0Q29udGVudCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5zaGFkb3dXcmFwcGVyLnRleHRDb250ZW50ID0gdmFsdWVcbiAgfVxuXG4gIGdldCBsYW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci5sYW5nXG4gIH1cblxuICBzZXQgbGFuZyh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5zaGFkb3dXcmFwcGVyLmxhbmcgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IG9mZnNldEhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNoYWRvd1dyYXBwZXIub2Zmc2V0SGVpZ2h0XG4gIH1cblxuICBnZXQgb2Zmc2V0TGVmdCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNoYWRvd1dyYXBwZXIub2Zmc2V0TGVmdFxuICB9XG5cbiAgZ2V0IG9mZnNldFBhcmVudCgpOiBFbGVtZW50IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci5vZmZzZXRQYXJlbnRcbiAgfVxuXG4gIGdldCBvZmZzZXRUb3AoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLm9mZnNldFRvcFxuICB9XG5cbiAgZ2V0IG9mZnNldFdpZHRoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci5vZmZzZXRXaWR0aFxuICB9XG5cbiAgZ2V0IGRpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLmdldERpc2FibGUoKVxuICB9XG5cbiAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5zZXREaXNhYmxlKHZhbHVlKVxuICB9XG5cbiAgZ2V0RGlzYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKVxuICB9XG5cbiAgYXBwZW5kQ2hpbGQ8VCBleHRlbmRzIE5vZGU+KG5vZGU6IFQpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLmFwcGVuZENoaWxkKG5vZGUpXG4gIH1cblxuICBzZXREaXNhYmxlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLnNoYWRvd1dyYXBwZXIuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNoYWRvd1dyYXBwZXIucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpXG4gICAgfVxuICB9XG5cbiAgZ2V0IHN0eWxlKCk6IENTU1N0eWxlRGVjbGFyYXRpb24ge1xuICAgIHJldHVybiB0aGlzLnNoYWRvd1dyYXBwZXIuc3R5bGVcbiAgfVxuXG4gIGdldCB0YWJJbmRleCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNoYWRvd1dyYXBwZXIudGFiSW5kZXhcbiAgfVxuXG4gIHNldCB0YWJJbmRleCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5zaGFkb3dXcmFwcGVyLnRhYkluZGV4ID0gdmFsdWVcbiAgfVxuXG4gIGdldCB0aXRsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnNoYWRvd1dyYXBwZXIudGl0bGVcbiAgfVxuXG4gIHNldCB0aXRsZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5zaGFkb3dXcmFwcGVyLnRpdGxlID0gdmFsdWVcbiAgfVxuXG4gIHNldCBvbnNlbGVjdCh2YWx1ZTogYW55KSB7fVxuXG4gIG9uY29weSA9IChldjogYW55KSA9PiB7XG4gICAgZXY/LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIG9uY3V0ID0gKGV2OiBhbnkpID0+IHtcbiAgICBldj8ucHJldmVudERlZmF1bHQoKVxuICB9XG5cbiAgb25wYXN0ZSA9IChldjogYW55KSA9PiB7XG4gICAgZXY/LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIG9ucmVzaXplID0gKGV2OiBhbnkpID0+IHtcbiAgICBldj8ucHJldmVudERlZmF1bHQoKVxuICB9XG5cbiAgb253aGVlbCA9IChldjogYW55KSA9PiB7XG4gICAgZXY/LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIG9uZHJhZ292ZXIgPSAoZXZlbnQ6IERyYWdFdmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIG9uZHJvcCA9IChldmVudDogRHJhZ0V2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICB9XG4gIC8vIC4uLiAob3RoZXIgZGVsZWdhdGVkIG1ldGhvZHMpXG5cbiAgYWRkRXZlbnRMaXN0ZW5lcihcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QsXG4gICAgb3B0aW9ucz86IGJvb2xlYW4gfCBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5zaGFkb3dXcmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpXG4gIH1cblxuICBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKTogRE9NUmVjdCB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICB9XG5cbiAgYXBwZW5kKC4uLm5vZGVzOiBBcnJheTxOb2RlIHwgc3RyaW5nPik6IHZvaWQge1xuICAgIHRoaXMuc2hhZG93V3JhcHBlci5hcHBlbmQoLi4ubm9kZXMpXG4gIH1cblxuICBibHVyKCk6IHZvaWQge1xuICAgIHRoaXMuc2hhZG93V3JhcHBlci5ibHVyKClcbiAgfVxuXG4gIGNsaWNrKCk6IHZvaWQge1xuICAgIHRoaXMuc2hhZG93V3JhcHBlci5jbGljaygpXG4gIH1cblxuICBvbmNvbnRleHRtZW51ID0gKGU6IGFueSkgPT4ge1xuICAgIGU/LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIGNsb3Nlc3Qoc2VsZWN0b3JzOiBzdHJpbmcpOiBFbGVtZW50IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci5jbG9zZXN0KHNlbGVjdG9ycylcbiAgfVxuXG4gIGRpc3BhdGNoRXZlbnQoZXZlbnQ6IEV2ZW50KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci5kaXNwYXRjaEV2ZW50KGV2ZW50KVxuICB9XG5cbiAgZm9jdXMob3B0aW9ucz86IEZvY3VzT3B0aW9ucyk6IHZvaWQge1xuICAgIHRoaXMuc2hhZG93V3JhcHBlci5mb2N1cyhvcHRpb25zKVxuICB9XG5cbiAgZ2V0QXR0cmlidXRlKG5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLnNoYWRvd1dyYXBwZXIuZ2V0QXR0cmlidXRlKG5hbWUpXG4gIH1cblxuICBnZXRBdHRyaWJ1dGVOUyhuYW1lc3BhY2VVUkk6IHN0cmluZyB8IG51bGwsIGxvY2FsTmFtZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci5nZXRBdHRyaWJ1dGVOUyhuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSlcbiAgfVxuXG4gIGdldEF0dHJpYnV0ZU5vZGUobmFtZTogc3RyaW5nKTogQXR0ciB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLnNoYWRvd1dyYXBwZXIuZ2V0QXR0cmlidXRlTm9kZShuYW1lKVxuICB9XG5cbiAgZ2V0QXR0cmlidXRlTm9kZU5TKG5hbWVzcGFjZVVSSTogc3RyaW5nIHwgbnVsbCwgbG9jYWxOYW1lOiBzdHJpbmcpOiBBdHRyIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci5nZXRBdHRyaWJ1dGVOb2RlTlMobmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpXG4gIH1cblxuICBoYXNBdHRyaWJ1dGUobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci5oYXNBdHRyaWJ1dGUobmFtZSlcbiAgfVxuXG4gIGhhc0F0dHJpYnV0ZU5TKG5hbWVzcGFjZVVSSTogc3RyaW5nIHwgbnVsbCwgbG9jYWxOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLmhhc0F0dHJpYnV0ZU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKVxuICB9XG5cbiAgaGFzQXR0cmlidXRlcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLmhhc0F0dHJpYnV0ZXMoKVxuICB9XG5cbiAgaW5zZXJ0QWRqYWNlbnRFbGVtZW50KHBvc2l0aW9uOiBJbnNlcnRQb3NpdGlvbiwgaW5zZXJ0ZWRFbGVtZW50OiBFbGVtZW50KTogRWxlbWVudCB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLnNoYWRvd1dyYXBwZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KHBvc2l0aW9uLCBpbnNlcnRlZEVsZW1lbnQpXG4gIH1cblxuICBpbnNlcnRBZGphY2VudEhUTUwocG9zaXRpb246IEluc2VydFBvc2l0aW9uLCB0ZXh0OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnNoYWRvd1dyYXBwZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKHBvc2l0aW9uLCB0ZXh0KVxuICB9XG5cbiAgaW5zZXJ0QWRqYWNlbnRUZXh0KHBvc2l0aW9uOiBJbnNlcnRQb3NpdGlvbiwgdGV4dDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5zaGFkb3dXcmFwcGVyLmluc2VydEFkamFjZW50VGV4dChwb3NpdGlvbiwgdGV4dClcbiAgfVxuXG4gIHJlbW92ZUF0dHJpYnV0ZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnNoYWRvd1dyYXBwZXIucmVtb3ZlQXR0cmlidXRlKG5hbWUpXG4gIH1cblxuICByZW1vdmVBdHRyaWJ1dGVOUyhuYW1lc3BhY2VVUkk6IHN0cmluZyB8IG51bGwsIGxvY2FsTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5zaGFkb3dXcmFwcGVyLnJlbW92ZUF0dHJpYnV0ZU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKVxuICB9XG5cbiAgcmVtb3ZlQXR0cmlidXRlTm9kZShhdHRyOiBBdHRyKTogQXR0ciB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZG93V3JhcHBlci5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHIpXG4gIH1cblxuICByZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCxcbiAgICBvcHRpb25zPzogYm9vbGVhbiB8IEV2ZW50TGlzdGVuZXJPcHRpb25zLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLnNoYWRvd1dyYXBwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucylcbiAgfVxuXG4gIHNldEF0dHJpYnV0ZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnNoYWRvd1dyYXBwZXIuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKVxuICB9XG5cbiAgc2V0QXR0cmlidXRlTlMobmFtZXNwYWNlVVJJOiBzdHJpbmcgfCBudWxsLCBxdWFsaWZpZWROYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnNoYWRvd1dyYXBwZXIuc2V0QXR0cmlidXRlTlMobmFtZXNwYWNlVVJJLCBxdWFsaWZpZWROYW1lLCB2YWx1ZSlcbiAgfVxuXG4gIHNldEF0dHJpYnV0ZU5vZGUoYXR0cjogQXR0cik6IEF0dHIgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLnNldEF0dHJpYnV0ZU5vZGUoYXR0cilcbiAgfVxuXG4gIHNldEF0dHJpYnV0ZU5vZGVOUyhhdHRyOiBBdHRyKTogQXR0ciB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLnNoYWRvd1dyYXBwZXIuc2V0QXR0cmlidXRlTm9kZU5TKGF0dHIpXG4gIH1cblxuICB0b2dnbGVBdHRyaWJ1dGUocXVhbGlmaWVkTmFtZTogc3RyaW5nLCBmb3JjZT86IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLnRvZ2dsZUF0dHJpYnV0ZShxdWFsaWZpZWROYW1lLCBmb3JjZSlcbiAgfVxuXG4gIHB1YmxpYyBnZXRTaGFkb3dXcmFwcGVyKCk6IEhUTUxFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyXG4gIH1cblxuICAvKiBhZGRTdHlsZXNoZWV0cyguLi5wYXRoczogc3RyaW5nW10pIHtcbiAgICB0aGlzLmFkZFN0eWxlKC4uLnBhdGhzKVxuICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKVxuICB9ICovXG5cbiAgYWRkU3R5bGUoc3R5bGVzOiBzdHJpbmdbXSk6IEhUTUxTdHlsZUVsZW1lbnRcbiAgYWRkU3R5bGUoc3R5bGU6IElBbnlPYmplY3QpOiBIVE1MU3R5bGVFbGVtZW50XG4gIGFkZFN0eWxlKHN0eWxlOiBzdHJpbmcpOiBIVE1MU3R5bGVFbGVtZW50XG4gIGFkZFN0eWxlKHN0eWxlOiBzdHJpbmdbXSB8IElBbnlPYmplY3QgfCBzdHJpbmcpOiBIVE1MU3R5bGVFbGVtZW50IHtcbiAgICBsZXQgc3R5bGVTdHJpbmc6IHN0cmluZyA9ICcnXG4gICAgbGV0IHByZXZpb3VzU3R5bGUgPSB0aGlzLnNoYWRvd1N0eWxlLnRleHRDb250ZW50ID8/ICcnXG4gICAgaWYgKHR5cGVvZiBzdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHN0eWxlU3RyaW5nID0gc3R5bGVcbiAgICAgIHRoaXMuc2hhZG93U3R5bGUudGV4dENvbnRlbnQgPSBwcmV2aW91c1N0eWxlICsgc3R5bGVTdHJpbmdcbiAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHN0eWxlKSkge1xuICAgICAgc3R5bGVTdHJpbmcgPSBgJHtjc3NTdHJpbmcoc3R5bGUpfWBcbiAgICAgIGNvbnN0IHN0YXJ0T2ZUaGlzSWRTdHlsZSA9IGAjJHt0aGlzLmlkfSB7YFxuICAgICAgcHJldmlvdXNTdHlsZSA9IHByZXZpb3VzU3R5bGUucmVwbGFjZShzdGFydE9mVGhpc0lkU3R5bGUsIGAke3N0YXJ0T2ZUaGlzSWRTdHlsZX0ke3N0eWxlU3RyaW5nfWApXG4gICAgICB0aGlzLnNoYWRvd1N0eWxlLnRleHRDb250ZW50ID0gcHJldmlvdXNTdHlsZVxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICAgIGZvciAoY29uc3Qgc3R5bGVJIG9mIHN0eWxlKSB7XG4gICAgICAgIHN0eWxlU3RyaW5nID0gc3R5bGVTdHJpbmc/LmNvbmNhdCgnXFxuXFxuJywgc3R5bGVJKVxuICAgICAgfVxuICAgICAgdGhpcy5zaGFkb3dTdHlsZS50ZXh0Q29udGVudCA9IHByZXZpb3VzU3R5bGUgKyBzdHlsZVN0cmluZ1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNoYWRvd1N0eWxlXG4gIH1cblxuICBhZGRQc2V1ZG9DbGFzcyhjbGF6ejogc3RyaW5nLCBzdHlsZTogSUFueU9iamVjdCkge1xuICAgIGlmICghY2xhenopIHtcbiAgICAgIHRocm93IG5ldyBOdWxsRXhjZXB0aW9uKCdQc2V1ZG8gQ2xhc3MgbmFtZSBub3QgcHJvdmlkZWQnKVxuICAgIH1cblxuICAgIGlmICghc3R5bGUpIHtcbiAgICAgIHRocm93IG5ldyBOdWxsRXhjZXB0aW9uKCdQc2V1ZG8gQ2xhc3Mgc3R5bGUgbm90IHByb3ZpZGVkJylcbiAgICB9XG5cbiAgICBpZiAoIWNsYXp6LmluY2x1ZGVzKCc6JykpIHtcbiAgICAgIGNsYXp6ID0gYDoke2NsYXp6fWBcbiAgICB9XG4gICAgY2xhenogPSBgJHt0aGlzLmlkfSR7Y2xhenp9YFxuICAgIHRoaXMuYWRkU3R5bGUoYCMke2NsYXp6fXske2Nzc1N0cmluZyhzdHlsZSl9fWApXG4gIH1cblxuICBob3ZlcmVkKHN0eWxlOiBJQW55T2JqZWN0KSB7XG4gICAgdGhpcy5hZGRQc2V1ZG9DbGFzcygnaG92ZXInLCBzdHlsZSlcbiAgfVxuXG4gIHNldEN1cnNvcihuYW1lOiBzdHJpbmcpIHtcbiAgICBpbXBvcnQoYC4uLy4uLy4uLy4uLy4uL2Fzc2V0cy9yYXdzL2N1cnNvci8ke25hbWV9LnN2Z2ApXG4gICAgICAudGhlbigoeyBkZWZhdWx0OiBjdXJzb3IgfSkgPT4ge1xuICAgICAgICB0aGlzLnN0eWxlLmN1cnNvciA9IGB1cmwoJHtjdXJzb3J9KSwgYXV0b2BcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIGN1cnNvcjonLCBlcnJvcilcbiAgICAgIH0pXG4gIH1cblxuICBhZGRJbmxpbmVTdHlsZSh7IG5hbWUsIHZhbHVlIH06IElQYWlyKSB7XG4gICAgdGhpcy5zaGFkb3dXcmFwcGVyLnN0eWxlW25hbWUgYXMgYW55XSA9IHZhbHVlXG4gIH1cblxuICBhZGRDbGFzc05hbWVzKC4uLmNsYXNzTmFtZXM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5zaGFkb3dXcmFwcGVyLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lcylcbiAgfVxuXG4gIHJlbW92ZUNsYXNzTmFtZXMoLi4uY2xhc3NOYW1lczogc3RyaW5nW10pIHtcbiAgICB0aGlzLnNoYWRvd1dyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc05hbWVzKVxuICB9XG5cbiAgcmVwbGFjZUNsYXNzTmFtZShvbGRDbGFzc05hbWU6IHN0cmluZywgbmV3Q2xhc3NOYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkb3dXcmFwcGVyLmNsYXNzTGlzdC5yZXBsYWNlKG9sZENsYXNzTmFtZSwgbmV3Q2xhc3NOYW1lKVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyByZWdpc3RlcihcbiAgICBlbGVtZW50OiB0eXBlb2YgQmFzZUNvbXBvbmVudCB8IHR5cGVvZiBIVE1MRWxlbWVudCxcbiAgKTogdHlwZW9mIEJhc2VDb21wb25lbnQgfCB0eXBlb2YgSFRNTEVsZW1lbnQge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRUYWdOYW1lRXhjZXB0aW9uKClcbiAgICB9XG4gICAgY29uc3QgdGFnTmFtZSA9IHNuYWtlQ2FzZShlbGVtZW50Lm5hbWUpXG4gICAgdHJ5IHtcbiAgICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWdOYW1lLCBlbGVtZW50KVxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUud2FybihlcnJvci5tZXNzYWdlKVxuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudFxuICB9XG5cbiAgc2V0U2NhbGUoc2NhbGU6IG51bWJlcikge1xuICAgIHRoaXMuc2NhbGUgPSBzY2FsZVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2VDb21wb25lbnRcbiJdfQ==