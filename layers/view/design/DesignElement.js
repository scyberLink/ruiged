"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const SharedConfig_1 = __importDefault(require("../../../common/SharedConfig"));
const constants_1 = require("../../../common/constants");
const NullException_1 = __importDefault(require("../../../common/exceptions/NullException"));
const DesignElementTypes_1 = __importDefault(require("../common/DesignElementTypes"));
const BaseDesignComponent_1 = __importDefault(require("./base/BaseDesignComponent"));
class DesignElement extends BaseDesignComponent_1.default {
    constructor(style) {
        super(Object.assign({}, (style !== null && style !== void 0 ? style : {})));
        this.lock = false;
        this.position = { x: 1, y: 2, metric: '%' };
        this.oncontextmenu = () => {
            this.showPopover();
            return true;
        };
        this.oncopy = (ev) => {
            ev === null || ev === void 0 ? void 0 : ev.preventDefault();
            SharedConfig_1.default.set(constants_1.CLIPBOARD, this);
        };
        this.oncut = (ev) => {
            var _a;
            ev === null || ev === void 0 ? void 0 : ev.preventDefault();
            SharedConfig_1.default.set(constants_1.CLIPBOARD, this.cloneNode(true));
            (_a = this.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this);
        };
        this.onpaste = (ev) => {
            ev === null || ev === void 0 ? void 0 : ev.preventDefault();
            const copiedDesignElement = SharedConfig_1.default.get(constants_1.CLIPBOARD);
            if (copiedDesignElement && (this.type == DesignElementTypes_1.default.DIV || this.type == DesignElementTypes_1.default.SPAN)) {
                this.appendChildren(copiedDesignElement);
            }
        };
        this.autofocus = false;
        this.initExtendedElement();
    }
    initExtendedElement() {
        this.extendedElement = document.createElement(`${this.type}`);
    }
    hidePopover() {
        this.removeLastChild();
    }
    showPopover() {
        const contextMenu = SharedConfig_1.default.get(constants_1.CONTEXT_MENU);
        if (!contextMenu) {
            throw new NullException_1.default('Context Menu element not found');
        }
        this.appendChildren(contextMenu);
        contextMenu.focus();
        contextMenu.onblur = (e) => {
            e === null || e === void 0 ? void 0 : e.preventDefault();
            this.hidePopover();
        };
    }
    set index(index) {
        this.zIndex = index;
        this.style.zIndex = `${index}`;
    }
    get index() {
        return this.zIndex;
    }
}
exports.default = DesignElement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVzaWduRWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXllcnMvdmlldy9kZXNpZ24vRGVzaWduRWxlbWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdGQUF1RDtBQUN2RCx5REFBOEY7QUFDOUYsNkZBQW9FO0FBSXBFLHNGQUE2RDtBQUU3RCxxRkFBNEQ7QUFNNUQsTUFBZSxhQUFjLFNBQVEsNkJBQW1CO0lBU3RELFlBQVksS0FBa0I7UUFDNUIsS0FBSyxtQkFDQSxDQUFDLEtBQUssYUFBTCxLQUFLLGNBQUwsS0FBSyxHQUFJLEVBQUUsQ0FBQyxFQUNoQixDQUFBO1FBUkosU0FBSSxHQUFHLEtBQUssQ0FBQTtRQUVaLGFBQVEsR0FBYyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUE7UUFjakQsa0JBQWEsR0FBRyxHQUFHLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO1lBQ2xCLE9BQU8sSUFBSSxDQUFBO1FBQ2IsQ0FBQyxDQUFBO1FBcUJELFdBQU0sR0FBRyxDQUFDLEVBQWtCLEVBQUUsRUFBRTtZQUM5QixFQUFFLGFBQUYsRUFBRSx1QkFBRixFQUFFLENBQUUsY0FBYyxFQUFFLENBQUE7WUFDcEIsc0JBQVksQ0FBQyxHQUFHLENBQUMscUJBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUNuQyxDQUFDLENBQUE7UUFFRCxVQUFLLEdBQUcsQ0FBQyxFQUFrQixFQUFFLEVBQUU7O1lBQzdCLEVBQUUsYUFBRixFQUFFLHVCQUFGLEVBQUUsQ0FBRSxjQUFjLEVBQUUsQ0FBQTtZQUNwQixzQkFBWSxDQUFDLEdBQUcsQ0FBQyxxQkFBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtZQUNqRCxNQUFBLElBQUksQ0FBQyxhQUFhLDBDQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN2QyxDQUFDLENBQUE7UUFFRCxZQUFPLEdBQUcsQ0FBQyxFQUFrQixFQUFFLEVBQUU7WUFDL0IsRUFBRSxhQUFGLEVBQUUsdUJBQUYsRUFBRSxDQUFFLGNBQWMsRUFBRSxDQUFBO1lBQ3BCLE1BQU0sbUJBQW1CLEdBQWtCLHNCQUFZLENBQUMsR0FBRyxDQUFDLHFCQUFTLENBQWdDLENBQUE7WUFDckcsSUFBSSxtQkFBbUIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksNEJBQWtCLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksNEJBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3hHLElBQUksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsQ0FBQTthQUN6QztRQUNILENBQUMsQ0FBQTtRQUVELGNBQVMsR0FBWSxLQUFLLENBQUE7UUFsRHhCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFRCxtQkFBbUI7UUFDakIsSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7SUFDL0QsQ0FBQztJQU9ELFdBQVc7UUFDVCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUE7SUFDeEIsQ0FBQztJQUVELFdBQVc7UUFDVCxNQUFNLFdBQVcsR0FBa0Isc0JBQVksQ0FBQyxHQUFHLENBQUMsd0JBQVksQ0FBZ0MsQ0FBQTtRQUVoRyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLE1BQU0sSUFBSSx1QkFBYSxDQUFDLGdDQUFnQyxDQUFDLENBQUE7U0FDMUQ7UUFFRCxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ2hDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNuQixXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDekIsQ0FBQyxhQUFELENBQUMsdUJBQUQsQ0FBQyxDQUFFLGNBQWMsRUFBRSxDQUFBO1lBQ25CLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUNwQixDQUFDLENBQUE7SUFDSCxDQUFDO0lBdUJELElBQUksS0FBSyxDQUFDLEtBQWE7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUE7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxLQUFLLEVBQUUsQ0FBQTtJQUNoQyxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBQ3BCLENBQUM7Q0F3QkY7QUFFRCxrQkFBZSxhQUFhLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2hhcmVkQ29uZmlnIGZyb20gJy4uLy4uLy4uL2NvbW1vbi9TaGFyZWRDb25maWcnXG5pbXBvcnQgeyBDTElQQk9BUkQsIENPTlRFWFRfTUVOVSwgREVTSUdOX0VMRU1FTlRfRVZFTlRfREFUQSB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9jb25zdGFudHMnXG5pbXBvcnQgTnVsbEV4Y2VwdGlvbiBmcm9tICcuLi8uLi8uLi9jb21tb24vZXhjZXB0aW9ucy9OdWxsRXhjZXB0aW9uJ1xuaW1wb3J0IElBbnlPYmplY3QgZnJvbSAnLi4vLi4vLi4vY29tbW9uL21vZGVscy9JQW55T2JqZWN0J1xuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSAnLi4vYXBwbGljYXRpb24vY29tcG9uZW50cy9iYXNlL0Jhc2VDb21wb25lbnQnXG5pbXBvcnQgSURlc2lnbkVsZW1lbnQgZnJvbSAnLi9tb2RlbHMvSURlc2lnbkVsZW1lbnQnXG5pbXBvcnQgRGVzaWduRWxlbWVudFR5cGVzIGZyb20gJy4uL2NvbW1vbi9EZXNpZ25FbGVtZW50VHlwZXMnXG5pbXBvcnQgSVBvc2l0aW9uIGZyb20gJy4uLy4uLy4uL2NvbW1vbi9tb2RlbHMvSVBvc2l0aW9uJ1xuaW1wb3J0IEJhc2VEZXNpZ25Db21wb25lbnQgZnJvbSAnLi9iYXNlL0Jhc2VEZXNpZ25Db21wb25lbnQnXG5cbmV4cG9ydCBpbnRlcmZhY2UgREVTSUdOX0VMRU1FTlRfRVZFTlRfREFUQV9UWVBFIHtcbiAgW0RFU0lHTl9FTEVNRU5UX0VWRU5UX0RBVEFdOiBJRGVzaWduRWxlbWVudFxufVxuXG5hYnN0cmFjdCBjbGFzcyBEZXNpZ25FbGVtZW50IGV4dGVuZHMgQmFzZURlc2lnbkNvbXBvbmVudCBpbXBsZW1lbnRzIElEZXNpZ25FbGVtZW50IHtcbiAgYWJzdHJhY3QgdHlwZTogRGVzaWduRWxlbWVudFR5cGVzXG4gIHByb3RlY3RlZCBleHRlbmRlZEVsZW1lbnQhOiBIVE1MRWxlbWVudFxuXG4gIGxvY2sgPSBmYWxzZVxuXG4gIHBvc2l0aW9uOiBJUG9zaXRpb24gPSB7IHg6IDEsIHk6IDIsIG1ldHJpYzogJyUnIH1cbiAgekluZGV4ITogbnVtYmVyXG5cbiAgY29uc3RydWN0b3Ioc3R5bGU/OiBJQW55T2JqZWN0KSB7XG4gICAgc3VwZXIoe1xuICAgICAgLi4uKHN0eWxlID8/IHt9KSxcbiAgICB9KVxuICAgIHRoaXMuaW5pdEV4dGVuZGVkRWxlbWVudCgpXG4gIH1cblxuICBpbml0RXh0ZW5kZWRFbGVtZW50KCkge1xuICAgIHRoaXMuZXh0ZW5kZWRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChgJHt0aGlzLnR5cGV9YClcbiAgfVxuXG4gIG9uY29udGV4dG1lbnUgPSAoKSA9PiB7XG4gICAgdGhpcy5zaG93UG9wb3ZlcigpXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGhpZGVQb3BvdmVyKCk6IHZvaWQge1xuICAgIHRoaXMucmVtb3ZlTGFzdENoaWxkKClcbiAgfVxuXG4gIHNob3dQb3BvdmVyKCk6IHZvaWQge1xuICAgIGNvbnN0IGNvbnRleHRNZW51OiBCYXNlQ29tcG9uZW50ID0gU2hhcmVkQ29uZmlnLmdldChDT05URVhUX01FTlUpIGFzIElBbnlPYmplY3QgYXMgQmFzZUNvbXBvbmVudFxuXG4gICAgaWYgKCFjb250ZXh0TWVudSkge1xuICAgICAgdGhyb3cgbmV3IE51bGxFeGNlcHRpb24oJ0NvbnRleHQgTWVudSBlbGVtZW50IG5vdCBmb3VuZCcpXG4gICAgfVxuXG4gICAgdGhpcy5hcHBlbmRDaGlsZHJlbihjb250ZXh0TWVudSlcbiAgICBjb250ZXh0TWVudS5mb2N1cygpXG4gICAgY29udGV4dE1lbnUub25ibHVyID0gKGUpID0+IHtcbiAgICAgIGU/LnByZXZlbnREZWZhdWx0KClcbiAgICAgIHRoaXMuaGlkZVBvcG92ZXIoKVxuICAgIH1cbiAgfVxuXG4gIG9uY29weSA9IChldjogQ2xpcGJvYXJkRXZlbnQpID0+IHtcbiAgICBldj8ucHJldmVudERlZmF1bHQoKVxuICAgIFNoYXJlZENvbmZpZy5zZXQoQ0xJUEJPQVJELCB0aGlzKVxuICB9XG5cbiAgb25jdXQgPSAoZXY6IENsaXBib2FyZEV2ZW50KSA9PiB7XG4gICAgZXY/LnByZXZlbnREZWZhdWx0KClcbiAgICBTaGFyZWRDb25maWcuc2V0KENMSVBCT0FSRCwgdGhpcy5jbG9uZU5vZGUodHJ1ZSkpXG4gICAgdGhpcy5wYXJlbnRFbGVtZW50Py5yZW1vdmVDaGlsZCh0aGlzKVxuICB9XG5cbiAgb25wYXN0ZSA9IChldjogQ2xpcGJvYXJkRXZlbnQpID0+IHtcbiAgICBldj8ucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGNvcGllZERlc2lnbkVsZW1lbnQ6IERlc2lnbkVsZW1lbnQgPSBTaGFyZWRDb25maWcuZ2V0KENMSVBCT0FSRCkgYXMgSUFueU9iamVjdCBhcyBEZXNpZ25FbGVtZW50XG4gICAgaWYgKGNvcGllZERlc2lnbkVsZW1lbnQgJiYgKHRoaXMudHlwZSA9PSBEZXNpZ25FbGVtZW50VHlwZXMuRElWIHx8IHRoaXMudHlwZSA9PSBEZXNpZ25FbGVtZW50VHlwZXMuU1BBTikpIHtcbiAgICAgIHRoaXMuYXBwZW5kQ2hpbGRyZW4oY29waWVkRGVzaWduRWxlbWVudClcbiAgICB9XG4gIH1cblxuICBhdXRvZm9jdXM6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIHNldCBpbmRleChpbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy56SW5kZXggPSBpbmRleFxuICAgIHRoaXMuc3R5bGUuekluZGV4ID0gYCR7aW5kZXh9YFxuICB9XG5cbiAgZ2V0IGluZGV4KCkge1xuICAgIHJldHVybiB0aGlzLnpJbmRleFxuICB9XG5cbiAgLyogb25tb3VzZW1vdmUgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQ/LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgaWYgKHRoaXMuaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyUmVjdDogRE9NUmVjdCA9IFNoYXJlZENvbmZpZy5nZXQoRFJBV0lOR19DQU5WQVMpIS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gY29udGFpbmVyUmVjdC5sZWZ0IC0gdGhpcy5ldmVuZXRPZmZzZXRYO1xuICAgICAgICAgICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFkgLSBjb250YWluZXJSZWN0LnRvcCAtIHRoaXMuZXZlbmV0T2Zmc2V0WTtcbiAgICAgICAgICAgIHRoaXMuc3R5bGUubGVmdCA9IHggKyAncHgnO1xuICAgICAgICAgICAgdGhpcy5zdHlsZS50b3AgPSB5ICsgJ3B4JztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9ubW91c2Vkb3duID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50Py5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZXZlbmV0T2Zmc2V0WCA9IGV2ZW50Lm9mZnNldFg7XG4gICAgICAgIHRoaXMuZXZlbmV0T2Zmc2V0WSA9IGV2ZW50Lm9mZnNldFk7XG4gICAgfVxuXG4gICAgb25tb3VzZXVwID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50Py5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgIH0gKi9cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGVzaWduRWxlbWVudFxuIl19