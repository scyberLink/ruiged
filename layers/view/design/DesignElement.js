import SharedConfig from '../../../common/SharedConfig';
import { CLIPBOARD, CONTEXT_MENU, DESIGN_ELEMENT_EVENT_DATA } from '../../../common/constants';
import NullException from '../../../common/exceptions/NullException';
import DesignElementTypes from '../common/DesignElementTypes';
import BaseDesignComponent from './base/BaseDesignComponent';
class DesignElement extends BaseDesignComponent {
    extendedElement;
    lock = false;
    position = { x: 1, y: 2, metric: '%' };
    zIndex;
    constructor(style) {
        super({
            ...(style ?? {}),
        });
        this.initExtendedElement();
    }
    initExtendedElement() {
        this.extendedElement = document.createElement(`${this.type}`);
    }
    oncontextmenu = () => {
        this.showPopover();
        return true;
    };
    hidePopover() {
        this.removeLastChild();
    }
    showPopover() {
        const contextMenu = SharedConfig.get(CONTEXT_MENU);
        if (!contextMenu) {
            throw new NullException('Context Menu element not found');
        }
        this.appendChildren(contextMenu);
        contextMenu.focus();
        contextMenu.onblur = (e) => {
            e?.preventDefault();
            this.hidePopover();
        };
    }
    oncopy = (ev) => {
        ev?.preventDefault();
        SharedConfig.set(CLIPBOARD, this);
    };
    oncut = (ev) => {
        ev?.preventDefault();
        SharedConfig.set(CLIPBOARD, this.cloneNode(true));
        this.parentElement?.removeChild(this);
    };
    onpaste = (ev) => {
        ev?.preventDefault();
        const copiedDesignElement = SharedConfig.get(CLIPBOARD);
        if (copiedDesignElement && (this.type == DesignElementTypes.DIV || this.type == DesignElementTypes.SPAN)) {
            this.appendChildren(copiedDesignElement);
        }
    };
    autofocus = false;
    set index(index) {
        this.zIndex = index;
        this.style.zIndex = `${index}`;
    }
    get index() {
        return this.zIndex;
    }
}
export default DesignElement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVzaWduRWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXllcnMvdmlldy9kZXNpZ24vRGVzaWduRWxlbWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFlBQVksTUFBTSw4QkFBOEIsQ0FBQTtBQUN2RCxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQzlGLE9BQU8sYUFBYSxNQUFNLDBDQUEwQyxDQUFBO0FBSXBFLE9BQU8sa0JBQWtCLE1BQU0sOEJBQThCLENBQUE7QUFFN0QsT0FBTyxtQkFBbUIsTUFBTSw0QkFBNEIsQ0FBQTtBQU01RCxNQUFlLGFBQWMsU0FBUSxtQkFBbUI7SUFFNUMsZUFBZSxDQUFjO0lBRXZDLElBQUksR0FBRyxLQUFLLENBQUE7SUFFWixRQUFRLEdBQWMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBQ2pELE1BQU0sQ0FBUztJQUVmLFlBQVksS0FBa0I7UUFDNUIsS0FBSyxDQUFDO1lBQ0osR0FBRyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7U0FDakIsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUE7SUFDNUIsQ0FBQztJQUVELG1CQUFtQjtRQUNqQixJQUFJLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0lBRUQsYUFBYSxHQUFHLEdBQUcsRUFBRTtRQUNuQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDbEIsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDLENBQUE7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFBO0lBQ3hCLENBQUM7SUFFRCxXQUFXO1FBQ1QsTUFBTSxXQUFXLEdBQWtCLFlBQVksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFnQyxDQUFBO1FBRWhHLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsTUFBTSxJQUFJLGFBQWEsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFBO1NBQzFEO1FBRUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUNoQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDbkIsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3pCLENBQUMsRUFBRSxjQUFjLEVBQUUsQ0FBQTtZQUNuQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDcEIsQ0FBQyxDQUFBO0lBQ0gsQ0FBQztJQUVELE1BQU0sR0FBRyxDQUFDLEVBQWtCLEVBQUUsRUFBRTtRQUM5QixFQUFFLEVBQUUsY0FBYyxFQUFFLENBQUE7UUFDcEIsWUFBWSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDbkMsQ0FBQyxDQUFBO0lBRUQsS0FBSyxHQUFHLENBQUMsRUFBa0IsRUFBRSxFQUFFO1FBQzdCLEVBQUUsRUFBRSxjQUFjLEVBQUUsQ0FBQTtRQUNwQixZQUFZLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDakQsSUFBSSxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDdkMsQ0FBQyxDQUFBO0lBRUQsT0FBTyxHQUFHLENBQUMsRUFBa0IsRUFBRSxFQUFFO1FBQy9CLEVBQUUsRUFBRSxjQUFjLEVBQUUsQ0FBQTtRQUNwQixNQUFNLG1CQUFtQixHQUFrQixZQUFZLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBZ0MsQ0FBQTtRQUNyRyxJQUFJLG1CQUFtQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxrQkFBa0IsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN4RyxJQUFJLENBQUMsY0FBYyxDQUFDLG1CQUFtQixDQUFDLENBQUE7U0FDekM7SUFDSCxDQUFDLENBQUE7SUFFRCxTQUFTLEdBQVksS0FBSyxDQUFBO0lBRTFCLElBQUksS0FBSyxDQUFDLEtBQWE7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUE7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxLQUFLLEVBQUUsQ0FBQTtJQUNoQyxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBQ3BCLENBQUM7Q0F3QkY7QUFFRCxlQUFlLGFBQWEsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTaGFyZWRDb25maWcgZnJvbSAnLi4vLi4vLi4vY29tbW9uL1NoYXJlZENvbmZpZydcbmltcG9ydCB7IENMSVBCT0FSRCwgQ09OVEVYVF9NRU5VLCBERVNJR05fRUxFTUVOVF9FVkVOVF9EQVRBIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2NvbnN0YW50cydcbmltcG9ydCBOdWxsRXhjZXB0aW9uIGZyb20gJy4uLy4uLy4uL2NvbW1vbi9leGNlcHRpb25zL051bGxFeGNlcHRpb24nXG5pbXBvcnQgSUFueU9iamVjdCBmcm9tICcuLi8uLi8uLi9jb21tb24vbW9kZWxzL0lBbnlPYmplY3QnXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuLi9hcHBsaWNhdGlvbi9jb21wb25lbnRzL2Jhc2UvQmFzZUNvbXBvbmVudCdcbmltcG9ydCBJRGVzaWduRWxlbWVudCBmcm9tICcuL21vZGVscy9JRGVzaWduRWxlbWVudCdcbmltcG9ydCBEZXNpZ25FbGVtZW50VHlwZXMgZnJvbSAnLi4vY29tbW9uL0Rlc2lnbkVsZW1lbnRUeXBlcydcbmltcG9ydCBJUG9zaXRpb24gZnJvbSAnLi4vLi4vLi4vY29tbW9uL21vZGVscy9JUG9zaXRpb24nXG5pbXBvcnQgQmFzZURlc2lnbkNvbXBvbmVudCBmcm9tICcuL2Jhc2UvQmFzZURlc2lnbkNvbXBvbmVudCdcblxuZXhwb3J0IGludGVyZmFjZSBERVNJR05fRUxFTUVOVF9FVkVOVF9EQVRBX1RZUEUge1xuICBbREVTSUdOX0VMRU1FTlRfRVZFTlRfREFUQV06IElEZXNpZ25FbGVtZW50XG59XG5cbmFic3RyYWN0IGNsYXNzIERlc2lnbkVsZW1lbnQgZXh0ZW5kcyBCYXNlRGVzaWduQ29tcG9uZW50IGltcGxlbWVudHMgSURlc2lnbkVsZW1lbnQge1xuICBhYnN0cmFjdCB0eXBlOiBEZXNpZ25FbGVtZW50VHlwZXNcbiAgcHJvdGVjdGVkIGV4dGVuZGVkRWxlbWVudCE6IEhUTUxFbGVtZW50XG5cbiAgbG9jayA9IGZhbHNlXG5cbiAgcG9zaXRpb246IElQb3NpdGlvbiA9IHsgeDogMSwgeTogMiwgbWV0cmljOiAnJScgfVxuICB6SW5kZXghOiBudW1iZXJcblxuICBjb25zdHJ1Y3RvcihzdHlsZT86IElBbnlPYmplY3QpIHtcbiAgICBzdXBlcih7XG4gICAgICAuLi4oc3R5bGUgPz8ge30pLFxuICAgIH0pXG4gICAgdGhpcy5pbml0RXh0ZW5kZWRFbGVtZW50KClcbiAgfVxuXG4gIGluaXRFeHRlbmRlZEVsZW1lbnQoKSB7XG4gICAgdGhpcy5leHRlbmRlZEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGAke3RoaXMudHlwZX1gKVxuICB9XG5cbiAgb25jb250ZXh0bWVudSA9ICgpID0+IHtcbiAgICB0aGlzLnNob3dQb3BvdmVyKClcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaGlkZVBvcG92ZXIoKTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdmVMYXN0Q2hpbGQoKVxuICB9XG5cbiAgc2hvd1BvcG92ZXIoKTogdm9pZCB7XG4gICAgY29uc3QgY29udGV4dE1lbnU6IEJhc2VDb21wb25lbnQgPSBTaGFyZWRDb25maWcuZ2V0KENPTlRFWFRfTUVOVSkgYXMgSUFueU9iamVjdCBhcyBCYXNlQ29tcG9uZW50XG5cbiAgICBpZiAoIWNvbnRleHRNZW51KSB7XG4gICAgICB0aHJvdyBuZXcgTnVsbEV4Y2VwdGlvbignQ29udGV4dCBNZW51IGVsZW1lbnQgbm90IGZvdW5kJylcbiAgICB9XG5cbiAgICB0aGlzLmFwcGVuZENoaWxkcmVuKGNvbnRleHRNZW51KVxuICAgIGNvbnRleHRNZW51LmZvY3VzKClcbiAgICBjb250ZXh0TWVudS5vbmJsdXIgPSAoZSkgPT4ge1xuICAgICAgZT8ucHJldmVudERlZmF1bHQoKVxuICAgICAgdGhpcy5oaWRlUG9wb3ZlcigpXG4gICAgfVxuICB9XG5cbiAgb25jb3B5ID0gKGV2OiBDbGlwYm9hcmRFdmVudCkgPT4ge1xuICAgIGV2Py5wcmV2ZW50RGVmYXVsdCgpXG4gICAgU2hhcmVkQ29uZmlnLnNldChDTElQQk9BUkQsIHRoaXMpXG4gIH1cblxuICBvbmN1dCA9IChldjogQ2xpcGJvYXJkRXZlbnQpID0+IHtcbiAgICBldj8ucHJldmVudERlZmF1bHQoKVxuICAgIFNoYXJlZENvbmZpZy5zZXQoQ0xJUEJPQVJELCB0aGlzLmNsb25lTm9kZSh0cnVlKSlcbiAgICB0aGlzLnBhcmVudEVsZW1lbnQ/LnJlbW92ZUNoaWxkKHRoaXMpXG4gIH1cblxuICBvbnBhc3RlID0gKGV2OiBDbGlwYm9hcmRFdmVudCkgPT4ge1xuICAgIGV2Py5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgY29waWVkRGVzaWduRWxlbWVudDogRGVzaWduRWxlbWVudCA9IFNoYXJlZENvbmZpZy5nZXQoQ0xJUEJPQVJEKSBhcyBJQW55T2JqZWN0IGFzIERlc2lnbkVsZW1lbnRcbiAgICBpZiAoY29waWVkRGVzaWduRWxlbWVudCAmJiAodGhpcy50eXBlID09IERlc2lnbkVsZW1lbnRUeXBlcy5ESVYgfHwgdGhpcy50eXBlID09IERlc2lnbkVsZW1lbnRUeXBlcy5TUEFOKSkge1xuICAgICAgdGhpcy5hcHBlbmRDaGlsZHJlbihjb3BpZWREZXNpZ25FbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIGF1dG9mb2N1czogYm9vbGVhbiA9IGZhbHNlXG5cbiAgc2V0IGluZGV4KGluZGV4OiBudW1iZXIpIHtcbiAgICB0aGlzLnpJbmRleCA9IGluZGV4XG4gICAgdGhpcy5zdHlsZS56SW5kZXggPSBgJHtpbmRleH1gXG4gIH1cblxuICBnZXQgaW5kZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuekluZGV4XG4gIH1cblxuICAvKiBvbm1vdXNlbW92ZSA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBldmVudD8ucHJldmVudERlZmF1bHQoKVxuICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nKSB7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJSZWN0OiBET01SZWN0ID0gU2hhcmVkQ29uZmlnLmdldChEUkFXSU5HX0NBTlZBUykhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFggLSBjb250YWluZXJSZWN0LmxlZnQgLSB0aGlzLmV2ZW5ldE9mZnNldFg7XG4gICAgICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIGNvbnRhaW5lclJlY3QudG9wIC0gdGhpcy5ldmVuZXRPZmZzZXRZO1xuICAgICAgICAgICAgdGhpcy5zdHlsZS5sZWZ0ID0geCArICdweCc7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLnRvcCA9IHkgKyAncHgnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25tb3VzZWRvd24gPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQ/LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5ldmVuZXRPZmZzZXRYID0gZXZlbnQub2Zmc2V0WDtcbiAgICAgICAgdGhpcy5ldmVuZXRPZmZzZXRZID0gZXZlbnQub2Zmc2V0WTtcbiAgICB9XG5cbiAgICBvbm1vdXNldXAgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQ/LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgfSAqL1xufVxuXG5leHBvcnQgZGVmYXVsdCBEZXNpZ25FbGVtZW50XG4iXX0=