"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
const NullException_1 = __importDefault(require("../../../../common/exceptions/NullException"));
const utils_1 = require("../../../../common/utils");
const Color_1 = __importDefault(require("../../application/common/Color"));
class BaseDesignComponent extends HTMLElement {
    get rotate() {
        return this._rotate;
    }
    set rotate(value) {
        this._rotate = value;
        this.style.rotate = `${value}deg`;
    }
    get scale() {
        return this._scale;
    }
    set scale(value) {
        this._scale = value;
        this.style.transform = `scale(${value})`;
    }
    constructor(style) {
        var _a, _b;
        super();
        this._scale = 1;
        this._rotate = 0;
        this.oncopy = (ev) => {
            ev === null || ev === void 0 ? void 0 : ev.preventDefault();
        };
        this.oncut = (ev) => {
            ev === null || ev === void 0 ? void 0 : ev.preventDefault();
        };
        this.onpaste = (ev) => {
            ev === null || ev === void 0 ? void 0 : ev.preventDefault();
        };
        this.onresize = (ev) => {
            ev === null || ev === void 0 ? void 0 : ev.preventDefault();
        };
        this.onwheel = (ev) => {
            ev === null || ev === void 0 ? void 0 : ev.preventDefault();
        };
        this.oncontextmenu = (e) => {
            e === null || e === void 0 ? void 0 : e.preventDefault();
        };
        this.ondragover = (event) => {
            event.preventDefault();
        };
        this.ondrop = (event) => {
            event.preventDefault();
        };
        this.shadowStyle = document.createElement('style');
        this.id = `${(_a = this.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()}`;
        this.shadowStyle.textContent = `
    #${(_b = this.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()} {
        ${(0, utils_1.cssString)(Object.assign({ background: Color_1.default.lightAsh, color: Color_1.default.black, border: `0.5px solid ${Color_1.default.ash}`, display: 'block', position: 'fixed', 'user-select': 'none' }, (style !== null && style !== void 0 ? style : {})))}
      }
    `;
        this.appendChild(this.shadowStyle);
    }
    removeChild(child) {
        return this.removeChild(child);
    }
    // Delegate properties and methods to the shadowWrapper
    get accessKey() {
        return this.accessKey;
    }
    set accessKey(value) {
        this.accessKey = value;
    }
    get attributes() {
        return this.attributes;
    }
    get classList() {
        return this.classList;
    }
    get className() {
        return this.className;
    }
    set className(value) {
        this.className = value;
    }
    get contentEditable() {
        return this.contentEditable;
    }
    set contentEditable(value) {
        this.contentEditable = value;
    }
    get clientWidth() {
        return this.clientWidth;
    }
    set clientWidth(value) {
        ;
        this.clientWidth = value;
    }
    get clientHeight() {
        return this.clientHeight;
    }
    set clientHeight(value) {
        ;
        this.clientHeight = value;
    }
    get innerText() {
        return this.innerText;
    }
    set innerText(value) {
        this.innerText = value;
    }
    get innerHTML() {
        return this.innerHTML;
    }
    set innerHTML(value) {
        this.innerHTML = value;
    }
    get dataset() {
        return this.dataset;
    }
    get dir() {
        return this.dir;
    }
    appendChildren(...children) {
        for (const child of children) {
            this.appendChild(child);
        }
    }
    set dir(value) {
        this.dir = value;
    }
    get draggable() {
        return this.draggable;
    }
    set draggable(value) {
        this.draggable = value;
    }
    get hidden() {
        return this.hidden;
    }
    set hidden(value) {
        this.hidden = value;
    }
    get id() {
        return this.id;
    }
    set id(value) {
        this.id = value;
    }
    get textContent() {
        return this.textContent;
    }
    set textContent(value) {
        this.textContent = value;
    }
    get lang() {
        return this.lang;
    }
    set lang(value) {
        this.lang = value;
    }
    get offsetHeight() {
        return this.offsetHeight;
    }
    get offsetLeft() {
        return this.offsetLeft;
    }
    get offsetParent() {
        return this.offsetParent;
    }
    get offsetTop() {
        return this.offsetTop;
    }
    get offsetWidth() {
        return this.offsetWidth;
    }
    get disabled() {
        return this.getDisable();
    }
    set disabled(value) {
        this.setDisable(value);
    }
    getDisable() {
        return this.hasAttribute('disabled');
    }
    appendChild(node) {
        return this.appendChild(node);
    }
    setDisable(value) {
        if (value) {
            this.setAttribute('disabled', '');
        }
        else {
            this.removeAttribute('disabled');
        }
    }
    get style() {
        return this.style;
    }
    get tabIndex() {
        return this.tabIndex;
    }
    set tabIndex(value) {
        this.tabIndex = value;
    }
    get title() {
        return this.title;
    }
    set title(value) {
        this.title = value;
    }
    set onselect(value) { }
    // ... (other delegated methods)
    addEventListener(type, listener, options) {
        this.addEventListener(type, listener, options);
    }
    getBoundingClientRect() {
        return this.getBoundingClientRect();
    }
    append(...nodes) {
        this.append(...nodes);
    }
    blur() {
        this.blur();
    }
    click() {
        this.click();
    }
    closest(selectors) {
        return this.closest(selectors);
    }
    dispatchEvent(event) {
        return this.dispatchEvent(event);
    }
    focus(options) {
        this.focus(options);
    }
    getAttribute(name) {
        return this.getAttribute(name);
    }
    getAttributeNS(namespaceURI, localName) {
        return this.getAttributeNS(namespaceURI, localName);
    }
    getAttributeNode(name) {
        return this.getAttributeNode(name);
    }
    getAttributeNodeNS(namespaceURI, localName) {
        return this.getAttributeNodeNS(namespaceURI, localName);
    }
    hasAttribute(name) {
        return this.hasAttribute(name);
    }
    hasAttributeNS(namespaceURI, localName) {
        return this.hasAttributeNS(namespaceURI, localName);
    }
    hasAttributes() {
        return this.hasAttributes();
    }
    insertAdjacentElement(position, insertedElement) {
        return this.insertAdjacentElement(position, insertedElement);
    }
    insertAdjacentHTML(position, text) {
        this.insertAdjacentHTML(position, text);
    }
    insertAdjacentText(position, text) {
        this.insertAdjacentText(position, text);
    }
    removeAttribute(name) {
        this.removeAttribute(name);
    }
    removeAttributeNS(namespaceURI, localName) {
        this.removeAttributeNS(namespaceURI, localName);
    }
    removeAttributeNode(attr) {
        return this.removeAttributeNode(attr);
    }
    removeEventListener(type, listener, options) {
        this.removeEventListener(type, listener, options);
    }
    setAttribute(name, value) {
        this.setAttribute(name, value);
    }
    setAttributeNS(namespaceURI, qualifiedName, value) {
        this.setAttributeNS(namespaceURI, qualifiedName, value);
    }
    setAttributeNode(attr) {
        return this.setAttributeNode(attr);
    }
    setAttributeNodeNS(attr) {
        return this.setAttributeNodeNS(attr);
    }
    toggleAttribute(qualifiedName, force) {
        return this.toggleAttribute(qualifiedName, force);
    }
    getShadowWrapper() {
        return this;
    }
    addStyle(style) {
        var _a;
        let styleString = '';
        let previousStyle = (_a = this.shadowStyle.textContent) !== null && _a !== void 0 ? _a : '';
        if (typeof style == 'string') {
            styleString = style;
            this.shadowStyle.textContent = previousStyle + styleString;
        }
        else if (!Array.isArray(style)) {
            styleString = `${(0, utils_1.cssString)(style)}`;
            const startOfThisIdStyle = `#${this.id} {`;
            previousStyle = previousStyle.replace(startOfThisIdStyle, `${startOfThisIdStyle}${styleString}`);
            this.shadowStyle.textContent = previousStyle;
        }
        else if (Array.isArray(style)) {
            for (const styleI of style) {
                styleString = styleString === null || styleString === void 0 ? void 0 : styleString.concat('\n\n', styleI);
            }
            this.shadowStyle.textContent = previousStyle + styleString;
        }
        return this.shadowStyle;
    }
    addPseudoClass(clazz, style) {
        if (!clazz) {
            throw new NullException_1.default('Pseudo Class name not provided');
        }
        if (!style) {
            throw new NullException_1.default('Pseudo Class style not provided');
        }
        if (!clazz.includes(':')) {
            clazz = `:${clazz}`;
        }
        clazz = `${this.id}${clazz}`;
        this.addStyle(`#${clazz}{${(0, utils_1.cssString)(style)}}`);
    }
    hovered(style) {
        this.addPseudoClass('hover', style);
    }
    setCursor(name) {
        this.style.cursor = `url('cursor/${name}.svg'), auto`;
    }
    addInlineStyle({ name, value }) {
        this.style[name] = value;
    }
    addClassNames(...classNames) {
        this.classList.add(...classNames);
    }
    removeClassNames(...classNames) {
        this.classList.remove(...classNames);
    }
    replaceClassName(oldClassName, newClassName) {
        return this.classList.replace(oldClassName, newClassName);
    }
    static new(element) {
        if (!element) {
            throw new NullException_1.default();
        }
        const wrapper = new BaseDesignComponent();
        wrapper.appendChildren(element);
        return wrapper;
    }
    setScale(scale) {
        this.scale = scale;
    }
    removeLastChild() {
        this.removeChild(this.lastChild);
    }
}
exports.default = BaseDesignComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZURlc2lnbkNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3J1aWcvc3JjL2xheWVycy92aWV3L2Rlc2lnbi9iYXNlL0Jhc2VEZXNpZ25Db21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1REFBdUQ7QUFDdkQsZ0dBQXVFO0FBR3ZFLG9EQUFvRDtBQUNwRCwyRUFBa0Q7QUFHbEQsTUFBTSxtQkFBb0IsU0FBUSxXQUFXO0lBSzNDLElBQVcsTUFBTTtRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQTtJQUNyQixDQUFDO0lBRUQsSUFBVyxNQUFNLENBQUMsS0FBYTtRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQTtRQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLEtBQUssS0FBSyxDQUFBO0lBQ25DLENBQUM7SUFFRCxJQUFXLEtBQUs7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUE7SUFDcEIsQ0FBQztJQUVELElBQVcsS0FBSyxDQUFDLEtBQWE7UUFDNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUE7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsU0FBUyxLQUFLLEdBQUcsQ0FBQTtJQUMxQyxDQUFDO0lBRUQsWUFBWSxLQUFrQjs7UUFDNUIsS0FBSyxFQUFFLENBQUE7UUF0QkQsV0FBTSxHQUFXLENBQUMsQ0FBQTtRQUNsQixZQUFPLEdBQVcsQ0FBQyxDQUFBO1FBME8zQixXQUFNLEdBQUcsQ0FBQyxFQUFPLEVBQUUsRUFBRTtZQUNuQixFQUFFLGFBQUYsRUFBRSx1QkFBRixFQUFFLENBQUUsY0FBYyxFQUFFLENBQUE7UUFDdEIsQ0FBQyxDQUFBO1FBRUQsVUFBSyxHQUFHLENBQUMsRUFBTyxFQUFFLEVBQUU7WUFDbEIsRUFBRSxhQUFGLEVBQUUsdUJBQUYsRUFBRSxDQUFFLGNBQWMsRUFBRSxD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LENBQUMsSUFBYSxDQUFDLEdBQUcsS0FBSyxDQUFBO0lBQ25DLENBQUM7SUFFRCxhQUFhLENBQUMsR0FBRyxVQUFvQjtRQUNuQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxHQUFHLFVBQW9CO1FBQ3RDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUVELGdCQUFnQixDQUFDLFlBQW9CLEVBQUUsWUFBb0I7UUFDekQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDM0QsQ0FBQztJQUVNLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBMEM7UUFDMUQsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE1BQU0sSUFBSSx1QkFBYSxFQUFFLENBQUE7U0FDMUI7UUFDRCxNQUFNLE9BQU8sR0FBRyxJQUFJLG1CQUFtQixFQUFFLENBQUE7UUFDekMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUMvQixPQUFPLE9BQU8sQ0FBQTtJQUNoQixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDcEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7SUFDcEIsQ0FBQztJQVVELGVBQWU7UUFDYixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUF3QixDQUFDLENBQUE7SUFDakQsQ0FBQztDQUNGO0FBRUQsa0JBQWUsbUJBQW1CLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgTnVsbEV4Y2VwdGlvbiBmcm9tICcuLi8uLi8uLi8uLi9jb21tb24vZXhjZXB0aW9ucy9OdWxsRXhjZXB0aW9uJ1xuaW1wb3J0IElBbnlPYmplY3QgZnJvbSAnLi4vLi4vLi4vLi4vY29tbW9uL21vZGVscy9JQW55T2JqZWN0J1xuaW1wb3J0IElQYWlyIGZyb20gJy4uLy4uLy4uLy4uL2NvbW1vbi9tb2RlbHMvSVBhaXInXG5pbXBvcnQgeyBjc3NTdHJpbmcgfSBmcm9tICcuLi8uLi8uLi8uLi9jb21tb24vdXRpbHMnXG5pbXBvcnQgQ29sb3IgZnJvbSAnLi4vLi4vYXBwbGljYXRpb24vY29tbW9uL0NvbG9yJ1xuaW1wb3J0IElEZWxlZ2F0ZU1vZGVsIGZyb20gJy4uLy4uL2FwcGxpY2F0aW9uL2NvbXBvbmVudHMvYmFzZS9JRGVsZWdhdGVNb2RlbCdcblxuY2xhc3MgQmFzZURlc2lnbkNvbXBvbmVudCBleHRlbmRzIEhUTUxFbGVtZW50IGltcGxlbWVudHMgSURlbGVnYXRlTW9kZWwge1xuICBwcm90ZWN0ZWQgc2hhZG93U3R5bGU6IEhUTUxTdHlsZUVsZW1lbnRcbiAgcHJpdmF0ZSBfc2NhbGU6IG51bWJlciA9IDFcbiAgcHJpdmF0ZSBfcm90YXRlOiBudW1iZXIgPSAwXG5cbiAgcHVibGljIGdldCByb3RhdGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fcm90YXRlXG4gIH1cblxuICBwdWJsaWMgc2V0IHJvdGF0ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fcm90YXRlID0gdmFsdWVcbiAgICB0aGlzLnN0eWxlLnJvdGF0ZSA9IGAke3ZhbHVlfWRlZ2BcbiAgfVxuXG4gIHB1YmxpYyBnZXQgc2NhbGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2NhbGVcbiAgfVxuXG4gIHB1YmxpYyBzZXQgc2NhbGUodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3NjYWxlID0gdmFsdWVcbiAgICB0aGlzLnN0eWxlLnRyYW5zZm9ybSA9IGBzY2FsZSgke3ZhbHVlfSlgXG4gIH1cblxuICBjb25zdHJ1Y3RvcihzdHlsZT86IElBbnlPYmplY3QpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5zaGFkb3dTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJylcbiAgICB0aGlzLmlkID0gYCR7dGhpcy50YWdOYW1lPy50b0xvd2VyQ2FzZSgpfWBcbiAgICB0aGlzLnNoYWRvd1N0eWxlLnRleHRDb250ZW50ID0gYFxuICAgICMke3RoaXMudGFnTmFtZT8udG9Mb3dlckNhc2UoKX0ge1xuICAgICAgICAke2Nzc1N0cmluZyh7XG4gICAgICAgICAgYmFja2dyb3VuZDogQ29sb3IubGlnaHRBc2gsXG4gICAgICAgICAgY29sb3I6IENvbG9yLmJsYWNrLFxuICAgICAgICAgIGJvcmRlcjogYDAuNXB4IHNvbGlkICR7Q29sb3IuYXNofWAsXG4gICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgICAndXNlci1zZWxlY3QnOiAnbm9uZScsXG4gICAgICAgICAgLi4uKHN0eWxlID8/IHt9KSxcbiAgICAgICAgfSl9XG4gICAgICB9XG4gICAgYFxuICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5zaGFkb3dTdHlsZSlcbiAgfVxuXG4gIHJlbW92ZUNoaWxkPFQgZXh0ZW5kcyBOb2RlPihjaGlsZDogVCk6IFQge1xuICAgIHJldHVybiB0aGlzLnJlbW92ZUNoaWxkKGNoaWxkKVxuICB9XG5cbiAgLy8gRGVsZWdhdGUgcHJvcGVydGllcyBhbmQgbWV0aG9kcyB0byB0aGUgc2hhZG93V3JhcHBlclxuXG4gIGdldCBhY2Nlc3NLZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5hY2Nlc3NLZXlcbiAgfVxuXG4gIHNldCBhY2Nlc3NLZXkodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuYWNjZXNzS2V5ID0gdmFsdWVcbiAgfVxuXG4gIGdldCBhdHRyaWJ1dGVzKCk6IE5hbWVkTm9kZU1hcCB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlc1xuICB9XG5cbiAgZ2V0IGNsYXNzTGlzdCgpOiBET01Ub2tlbkxpc3Qge1xuICAgIHJldHVybiB0aGlzLmNsYXNzTGlzdFxuICB9XG5cbiAgZ2V0IGNsYXNzTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNsYXNzTmFtZVxuICB9XG5cbiAgc2V0IGNsYXNzTmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5jbGFzc05hbWUgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IGNvbnRlbnRFZGl0YWJsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnRFZGl0YWJsZVxuICB9XG5cbiAgc2V0IGNvbnRlbnRFZGl0YWJsZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5jb250ZW50RWRpdGFibGUgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IGNsaWVudFdpZHRoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50V2lkdGhcbiAgfVxuXG4gIHNldCBjbGllbnRXaWR0aCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgOyh0aGlzIGFzIGFueSkuY2xpZW50V2lkdGggPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IGNsaWVudEhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNsaWVudEhlaWdodFxuICB9XG5cbiAgc2V0IGNsaWVudEhlaWdodCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgOyh0aGlzIGFzIGFueSkuY2xpZW50SGVpZ2h0ID0gdmFsdWVcbiAgfVxuXG4gIGdldCBpbm5lclRleHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pbm5lclRleHRcbiAgfVxuXG4gIHNldCBpbm5lclRleHQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuaW5uZXJUZXh0ID0gdmFsdWVcbiAgfVxuXG4gIGdldCBpbm5lckhUTUwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pbm5lckhUTUxcbiAgfVxuXG4gIHNldCBpbm5lckhUTUwodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWVcbiAgfVxuXG4gIGdldCBkYXRhc2V0KCk6IERPTVN0cmluZ01hcCB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YXNldFxuICB9XG5cbiAgZ2V0IGRpcigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmRpclxuICB9XG5cbiAgYXBwZW5kQ2hpbGRyZW4oLi4uY2hpbGRyZW46IEhUTUxFbGVtZW50W10pIHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICB0aGlzLmFwcGVuZENoaWxkKGNoaWxkKVxuICAgIH1cbiAgfVxuXG4gIHNldCBkaXIodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuZGlyID0gdmFsdWVcbiAgfVxuXG4gIGdldCBkcmFnZ2FibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZHJhZ2dhYmxlXG4gIH1cblxuICBzZXQgZHJhZ2dhYmxlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5kcmFnZ2FibGUgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IGhpZGRlbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5oaWRkZW5cbiAgfVxuXG4gIHNldCBoaWRkZW4odmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmhpZGRlbiA9IHZhbHVlXG4gIH1cblxuICBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pZFxuICB9XG5cbiAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLmlkID0gdmFsdWVcbiAgfVxuXG4gIGdldCB0ZXh0Q29udGVudCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnRleHRDb250ZW50IGFzIHN0cmluZ1xuICB9XG5cbiAgc2V0IHRleHRDb250ZW50KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWVcbiAgfVxuXG4gIGdldCBsYW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubGFuZ1xuICB9XG5cbiAgc2V0IGxhbmcodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMubGFuZyA9IHZhbHVlXG4gIH1cblxuICBnZXQgb2Zmc2V0SGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMub2Zmc2V0SGVpZ2h0XG4gIH1cblxuICBnZXQgb2Zmc2V0TGVmdCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLm9mZnNldExlZnRcbiAgfVxuXG4gIGdldCBvZmZzZXRQYXJlbnQoKTogRWxlbWVudCB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLm9mZnNldFBhcmVudFxuICB9XG5cbiAgZ2V0IG9mZnNldFRvcCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLm9mZnNldFRvcFxuICB9XG5cbiAgZ2V0IG9mZnNldFdpZHRoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMub2Zmc2V0V2lkdGhcbiAgfVxuXG4gIGdldCBkaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXREaXNhYmxlKClcbiAgfVxuXG4gIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuc2V0RGlzYWJsZSh2YWx1ZSlcbiAgfVxuXG4gIGdldERpc2FibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpXG4gIH1cblxuICBhcHBlbmRDaGlsZDxUIGV4dGVuZHMgTm9kZT4obm9kZTogVCk6IFQge1xuICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKG5vZGUpXG4gIH1cblxuICBzZXREaXNhYmxlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcbiAgICB9XG4gIH1cblxuICBnZXQgc3R5bGUoKTogQ1NTU3R5bGVEZWNsYXJhdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuc3R5bGVcbiAgfVxuXG4gIGdldCB0YWJJbmRleCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnRhYkluZGV4XG4gIH1cblxuICBzZXQgdGFiSW5kZXgodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMudGFiSW5kZXggPSB2YWx1ZVxuICB9XG5cbiAgZ2V0IHRpdGxlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudGl0bGVcbiAgfVxuXG4gIHNldCB0aXRsZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy50aXRsZSA9IHZhbHVlXG4gIH1cblxuICBzZXQgb25zZWxlY3QodmFsdWU6IGFueSkge31cblxuICBvbmNvcHkgPSAoZXY6IGFueSkgPT4ge1xuICAgIGV2Py5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBvbmN1dCA9IChldjogYW55KSA9PiB7XG4gICAgZXY/LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIG9ucGFzdGUgPSAoZXY6IGFueSkgPT4ge1xuICAgIGV2Py5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBvbnJlc2l6ZSA9IChldjogYW55KSA9PiB7XG4gICAgZXY/LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIG9ud2hlZWwgPSAoZXY6IGFueSkgPT4ge1xuICAgIGV2Py5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICAvLyAuLi4gKG90aGVyIGRlbGVnYXRlZCBtZXRob2RzKVxuXG4gIGFkZEV2ZW50TGlzdGVuZXIoXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIGxpc3RlbmVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0LFxuICAgIG9wdGlvbnM/OiBib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucylcbiAgfVxuXG4gIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOiBET01SZWN0IHtcbiAgICByZXR1cm4gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICB9XG5cbiAgYXBwZW5kKC4uLm5vZGVzOiAoTm9kZSB8IHN0cmluZylbXSk6IHZvaWQge1xuICAgIHRoaXMuYXBwZW5kKC4uLm5vZGVzKVxuICB9XG5cbiAgYmx1cigpOiB2b2lkIHtcbiAgICB0aGlzLmJsdXIoKVxuICB9XG5cbiAgY2xpY2soKTogdm9pZCB7XG4gICAgdGhpcy5jbGljaygpXG4gIH1cblxuICBvbmNvbnRleHRtZW51ID0gKGU6IGFueSkgPT4ge1xuICAgIGU/LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIGNsb3Nlc3Qoc2VsZWN0b3JzOiBzdHJpbmcpOiBFbGVtZW50IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuY2xvc2VzdChzZWxlY3RvcnMpXG4gIH1cblxuICBkaXNwYXRjaEV2ZW50KGV2ZW50OiBFdmVudCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpXG4gIH1cblxuICBmb2N1cyhvcHRpb25zPzogRm9jdXNPcHRpb25zKTogdm9pZCB7XG4gICAgdGhpcy5mb2N1cyhvcHRpb25zKVxuICB9XG5cbiAgZ2V0QXR0cmlidXRlKG5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKVxuICB9XG5cbiAgZ2V0QXR0cmlidXRlTlMobmFtZXNwYWNlVVJJOiBzdHJpbmcgfCBudWxsLCBsb2NhbE5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKVxuICB9XG5cbiAgZ2V0QXR0cmlidXRlTm9kZShuYW1lOiBzdHJpbmcpOiBBdHRyIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlTm9kZShuYW1lKVxuICB9XG5cbiAgZ2V0QXR0cmlidXRlTm9kZU5TKG5hbWVzcGFjZVVSSTogc3RyaW5nIHwgbnVsbCwgbG9jYWxOYW1lOiBzdHJpbmcpOiBBdHRyIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlTm9kZU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKVxuICB9XG5cbiAgaGFzQXR0cmlidXRlKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmhhc0F0dHJpYnV0ZShuYW1lKVxuICB9XG5cbiAgaGFzQXR0cmlidXRlTlMobmFtZXNwYWNlVVJJOiBzdHJpbmcgfCBudWxsLCBsb2NhbE5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmhhc0F0dHJpYnV0ZU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKVxuICB9XG5cbiAgaGFzQXR0cmlidXRlcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5oYXNBdHRyaWJ1dGVzKClcbiAgfVxuXG4gIGluc2VydEFkamFjZW50RWxlbWVudChwb3NpdGlvbjogSW5zZXJ0UG9zaXRpb24sIGluc2VydGVkRWxlbWVudDogRWxlbWVudCk6IEVsZW1lbnQgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRBZGphY2VudEVsZW1lbnQocG9zaXRpb24sIGluc2VydGVkRWxlbWVudClcbiAgfVxuXG4gIGluc2VydEFkamFjZW50SFRNTChwb3NpdGlvbjogSW5zZXJ0UG9zaXRpb24sIHRleHQ6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuaW5zZXJ0QWRqYWNlbnRIVE1MKHBvc2l0aW9uLCB0ZXh0KVxuICB9XG5cbiAgaW5zZXJ0QWRqYWNlbnRUZXh0KHBvc2l0aW9uOiBJbnNlcnRQb3NpdGlvbiwgdGV4dDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5pbnNlcnRBZGphY2VudFRleHQocG9zaXRpb24sIHRleHQpXG4gIH1cblxuICByZW1vdmVBdHRyaWJ1dGUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSlcbiAgfVxuXG4gIHJlbW92ZUF0dHJpYnV0ZU5TKG5hbWVzcGFjZVVSSTogc3RyaW5nIHwgbnVsbCwgbG9jYWxOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKVxuICB9XG5cbiAgcmVtb3ZlQXR0cmlidXRlTm9kZShhdHRyOiBBdHRyKTogQXR0ciB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlQXR0cmlidXRlTm9kZShhdHRyKVxuICB9XG5cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QsXG4gICAgb3B0aW9ucz86IGJvb2xlYW4gfCBFdmVudExpc3RlbmVyT3B0aW9ucyxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKVxuICB9XG5cbiAgc2V0QXR0cmlidXRlKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKVxuICB9XG5cbiAgc2V0QXR0cmlidXRlTlMobmFtZXNwYWNlVVJJOiBzdHJpbmcgfCBudWxsLCBxdWFsaWZpZWROYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKG5hbWVzcGFjZVVSSSwgcXVhbGlmaWVkTmFtZSwgdmFsdWUpXG4gIH1cblxuICBzZXRBdHRyaWJ1dGVOb2RlKGF0dHI6IEF0dHIpOiBBdHRyIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc2V0QXR0cmlidXRlTm9kZShhdHRyKVxuICB9XG5cbiAgc2V0QXR0cmlidXRlTm9kZU5TKGF0dHI6IEF0dHIpOiBBdHRyIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc2V0QXR0cmlidXRlTm9kZU5TKGF0dHIpXG4gIH1cblxuICB0b2dnbGVBdHRyaWJ1dGUocXVhbGlmaWVkTmFtZTogc3RyaW5nLCBmb3JjZT86IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVBdHRyaWJ1dGUocXVhbGlmaWVkTmFtZSwgZm9yY2UpXG4gIH1cblxuICBwdWJsaWMgZ2V0U2hhZG93V3JhcHBlcigpOiBIVE1MRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qIGFkZFN0eWxlc2hlZXRzKC4uLnBhdGhzOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuYWRkU3R5bGUoLi4ucGF0aHMpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpXG4gIH0gKi9cblxuICBhZGRTdHlsZShzdHlsZXM6IHN0cmluZ1tdKTogSFRNTFN0eWxlRWxlbWVudFxuICBhZGRTdHlsZShzdHlsZTogSUFueU9iamVjdCk6IEhUTUxTdHlsZUVsZW1lbnRcbiAgYWRkU3R5bGUoc3R5bGU6IHN0cmluZyk6IEhUTUxTdHlsZUVsZW1lbnRcbiAgYWRkU3R5bGUoc3R5bGU6IHN0cmluZ1tdIHwgSUFueU9iamVjdCB8IHN0cmluZyk6IEhUTUxTdHlsZUVsZW1lbnQge1xuICAgIGxldCBzdHlsZVN0cmluZzogc3RyaW5nID0gJydcbiAgICBsZXQgcHJldmlvdXNTdHlsZSA9IHRoaXMuc2hhZG93U3R5bGUudGV4dENvbnRlbnQgPz8gJydcbiAgICBpZiAodHlwZW9mIHN0eWxlID09ICdzdHJpbmcnKSB7XG4gICAgICBzdHlsZVN0cmluZyA9IHN0eWxlXG4gICAgICB0aGlzLnNoYWRvd1N0eWxlLnRleHRDb250ZW50ID0gcHJldmlvdXNTdHlsZSArIHN0eWxlU3RyaW5nXG4gICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICAgIHN0eWxlU3RyaW5nID0gYCR7Y3NzU3RyaW5nKHN0eWxlIGFzIElBbnlPYmplY3QpfWBcbiAgICAgIGNvbnN0IHN0YXJ0T2ZUaGlzSWRTdHlsZSA9IGAjJHt0aGlzLmlkfSB7YFxuICAgICAgcHJldmlvdXNTdHlsZSA9IHByZXZpb3VzU3R5bGUucmVwbGFjZShzdGFydE9mVGhpc0lkU3R5bGUsIGAke3N0YXJ0T2ZUaGlzSWRTdHlsZX0ke3N0eWxlU3RyaW5nfWApXG4gICAgICB0aGlzLnNoYWRvd1N0eWxlLnRleHRDb250ZW50ID0gcHJldmlvdXNTdHlsZVxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICAgIGZvciAoY29uc3Qgc3R5bGVJIG9mIHN0eWxlKSB7XG4gICAgICAgIHN0eWxlU3RyaW5nID0gc3R5bGVTdHJpbmc/LmNvbmNhdCgnXFxuXFxuJywgc3R5bGVJKVxuICAgICAgfVxuICAgICAgdGhpcy5zaGFkb3dTdHlsZS50ZXh0Q29udGVudCA9IHByZXZpb3VzU3R5bGUgKyBzdHlsZVN0cmluZ1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNoYWRvd1N0eWxlIGFzIEhUTUxTdHlsZUVsZW1lbnRcbiAgfVxuXG4gIGFkZFBzZXVkb0NsYXNzKGNsYXp6OiBzdHJpbmcsIHN0eWxlOiBJQW55T2JqZWN0KSB7XG4gICAgaWYgKCFjbGF6eikge1xuICAgICAgdGhyb3cgbmV3IE51bGxFeGNlcHRpb24oJ1BzZXVkbyBDbGFzcyBuYW1lIG5vdCBwcm92aWRlZCcpXG4gICAgfVxuXG4gICAgaWYgKCFzdHlsZSkge1xuICAgICAgdGhyb3cgbmV3IE51bGxFeGNlcHRpb24oJ1BzZXVkbyBDbGFzcyBzdHlsZSBub3QgcHJvdmlkZWQnKVxuICAgIH1cblxuICAgIGlmICghY2xhenouaW5jbHVkZXMoJzonKSkge1xuICAgICAgY2xhenogPSBgOiR7Y2xhenp9YFxuICAgIH1cbiAgICBjbGF6eiA9IGAke3RoaXMuaWR9JHtjbGF6en1gXG4gICAgdGhpcy5hZGRTdHlsZShgIyR7Y2xhenp9eyR7Y3NzU3RyaW5nKHN0eWxlKX19YClcbiAgfVxuXG4gIGhvdmVyZWQoc3R5bGU6IElBbnlPYmplY3QpIHtcbiAgICB0aGlzLmFkZFBzZXVkb0NsYXNzKCdob3ZlcicsIHN0eWxlKVxuICB9XG5cbiAgc2V0Q3Vyc29yKG5hbWU6IHN0cmluZykge1xuICAgIHRoaXMuc3R5bGUuY3Vyc29yID0gYHVybCgnY3Vyc29yLyR7bmFtZX0uc3ZnJyksIGF1dG9gXG4gIH1cblxuICBhZGRJbmxpbmVTdHlsZSh7IG5hbWUsIHZhbHVlIH06IElQYWlyKSB7XG4gICAgdGhpcy5zdHlsZVtuYW1lIGFzIG5ldmVyXSA9IHZhbHVlXG4gIH1cblxuICBhZGRDbGFzc05hbWVzKC4uLmNsYXNzTmFtZXM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzTmFtZXMpXG4gIH1cblxuICByZW1vdmVDbGFzc05hbWVzKC4uLmNsYXNzTmFtZXM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzTmFtZXMpXG4gIH1cblxuICByZXBsYWNlQ2xhc3NOYW1lKG9sZENsYXNzTmFtZTogc3RyaW5nLCBuZXdDbGFzc05hbWU6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmNsYXNzTGlzdC5yZXBsYWNlKG9sZENsYXNzTmFtZSwgbmV3Q2xhc3NOYW1lKVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBuZXcoZWxlbWVudDogQmFzZURlc2lnbkNvbXBvbmVudCB8IEhUTUxFbGVtZW50KTogQmFzZURlc2lnbkNvbXBvbmVudCB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICB0aHJvdyBuZXcgTnVsbEV4Y2VwdGlvbigpXG4gICAgfVxuICAgIGNvbnN0IHdyYXBwZXIgPSBuZXcgQmFzZURlc2lnbkNvbXBvbmVudCgpXG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZHJlbihlbGVtZW50KVxuICAgIHJldHVybiB3cmFwcGVyXG4gIH1cblxuICBzZXRTY2FsZShzY2FsZTogbnVtYmVyKSB7XG4gICAgdGhpcy5zY2FsZSA9IHNjYWxlXG4gIH1cblxuICBvbmRyYWdvdmVyID0gKGV2ZW50OiBEcmFnRXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBvbmRyb3AgPSAoZXZlbnQ6IERyYWdFdmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIHJlbW92ZUxhc3RDaGlsZCgpIHtcbiAgICB0aGlzLnJlbW92ZUNoaWxkKHRoaXMubGFzdENoaWxkIGFzIEhUTUxFbGVtZW50KVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2VEZXNpZ25Db21wb25lbnRcbiJdfQ==