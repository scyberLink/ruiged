"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
const CACHER_CACHE_NAME = 'cacher-cache-v1';
const urlsToCache = [
    '/',
    '/index.html',
    '/manifest.json',
    '/favicon.ico',
    // Add other assets to cache here
];
self.addEventListener('install', (event) => {
    event.waitUntil(caches
        .open(CACHER_CACHE_NAME)
        .then((cache) => cache.addAll(urlsToCache))
        .catch((error) => console.error('Cache installation failed:', error)));
});
self.addEventListener('fetch', (event) => {
    event.respondWith(caches.match(event.request).then((response) => {
        if (response) {
            return response;
        }
        return fetch(event.request)
            .then((fetchResponse) => {
            if (!fetchResponse || fetchResponse.status !== 200 || fetchResponse.type !== 'basic') {
                return fetchResponse;
            }
            const clonedResponse = fetchResponse.clone();
            caches
                .open(CACHER_CACHE_NAME)
                .then((cache) => cache.put(event.request, clonedResponse))
                .catch((error) => console.error('Error caching response:', error));
            return fetchResponse;
        })
            .catch((error) => {
            console.error('Fetch failed:', error);
            // Optionally, return a fallback response here
        });
    }));
});
self.addEventListener('activate', (event) => {
    event.waitUntil(caches.keys().then((cacheNames) => {
        return Promise.all(cacheNames
            .filter((cacheName) => {
            return cacheName.startsWith('cacher-cache-') && cacheName !== CACHER_CACHE_NAME;
        })
            .map((cacheName) => {
            return caches.delete(cacheName);
        }));
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vcnVpZy9zcmMvd29ya2Vycy9jYWNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1REFBdUQ7QUFDdkQsTUFBTSxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQTtBQUUzQyxNQUFNLFdBQVcsR0FBRztJQUNsQixHQUFHO0lBQ0gsYUFBYTtJQUNiLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2QsaUNBQWlDO0NBQ2xDLENBQUE7QUFFRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBVSxFQUFFLEVBQUU7SUFDOUMsS0FBSyxDQUFDLFNBQVMsQ0FDYixNQUFNO1NBQ0gsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1NBQ3ZCLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUMxQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FDeEUsQ0FBQTtBQUNILENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO0lBQzVDLEtBQUssQ0FBQyxXQUFXLENBQ2YsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7UUFDNUMsSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLFFBQVEsQ0FBQTtTQUNoQjtRQUVELE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7YUFDeEIsSUFBSSxDQUFDLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGFBQWEsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtnQkFDcEYsT0FBTyxhQUFhLENBQUE7YUFDckI7WUFFRCxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUE7WUFFNUMsTUFBTTtpQkFDSCxJQUFJLENBQUMsaUJBQWlCLENBQUM7aUJBQ3ZCLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDO2lCQUN6RCxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtZQUVwRSxPQUFPLGFBQWEsQ0FBQTtRQUN0QixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFBO1lBQ3JDLDhDQUE4QztRQUNoRCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUMsQ0FBQyxDQUNILENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFVLEVBQUUsRUFBRTtJQUMvQyxLQUFLLENBQUMsU0FBUyxDQUNiLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtRQUNoQyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQ2hCLFVBQVU7YUFDUCxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUNwQixPQUFPLFNBQVMsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLElBQUksU0FBUyxLQUFLLGlCQUFpQixDQUFBO1FBQ2pGLENBQUMsQ0FBQzthQUNELEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ2pCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNqQyxDQUFDLENBQUMsQ0FDTCxDQUFBO0lBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQTtBQUNILENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuY29uc3QgQ0FDSEVSX0NBQ0hFX05BTUUgPSAnY2FjaGVyLWNhY2hlLXYxJ1xuXG5jb25zdCB1cmxzVG9DYWNoZSA9IFtcbiAgJy8nLFxuICAnL2luZGV4Lmh0bWwnLFxuICAnL21hbmlmZXN0Lmpzb24nLFxuICAnL2Zhdmljb24uaWNvJyxcbiAgLy8gQWRkIG90aGVyIGFzc2V0cyB0byBjYWNoZSBoZXJlXG5dXG5cbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignaW5zdGFsbCcsIChldmVudDogYW55KSA9PiB7XG4gIGV2ZW50LndhaXRVbnRpbChcbiAgICBjYWNoZXNcbiAgICAgIC5vcGVuKENBQ0hFUl9DQUNIRV9OQU1FKVxuICAgICAgLnRoZW4oKGNhY2hlKSA9PiBjYWNoZS5hZGRBbGwodXJsc1RvQ2FjaGUpKVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5lcnJvcignQ2FjaGUgaW5zdGFsbGF0aW9uIGZhaWxlZDonLCBlcnJvcikpLFxuICApXG59KVxuXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2ZldGNoJywgKGV2ZW50OiBhbnkpID0+IHtcbiAgZXZlbnQucmVzcG9uZFdpdGgoXG4gICAgY2FjaGVzLm1hdGNoKGV2ZW50LnJlcXVlc3QpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmZXRjaChldmVudC5yZXF1ZXN0KVxuICAgICAgICAudGhlbigoZmV0Y2hSZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGlmICghZmV0Y2hSZXNwb25zZSB8fCBmZXRjaFJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwIHx8IGZldGNoUmVzcG9uc2UudHlwZSAhPT0gJ2Jhc2ljJykge1xuICAgICAgICAgICAgcmV0dXJuIGZldGNoUmVzcG9uc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBjbG9uZWRSZXNwb25zZSA9IGZldGNoUmVzcG9uc2UuY2xvbmUoKVxuXG4gICAgICAgICAgY2FjaGVzXG4gICAgICAgICAgICAub3BlbihDQUNIRVJfQ0FDSEVfTkFNRSlcbiAgICAgICAgICAgIC50aGVuKChjYWNoZSkgPT4gY2FjaGUucHV0KGV2ZW50LnJlcXVlc3QsIGNsb25lZFJlc3BvbnNlKSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNhY2hpbmcgcmVzcG9uc2U6JywgZXJyb3IpKVxuXG4gICAgICAgICAgcmV0dXJuIGZldGNoUmVzcG9uc2VcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZldGNoIGZhaWxlZDonLCBlcnJvcilcbiAgICAgICAgICAvLyBPcHRpb25hbGx5LCByZXR1cm4gYSBmYWxsYmFjayByZXNwb25zZSBoZXJlXG4gICAgICAgIH0pXG4gICAgfSksXG4gIClcbn0pXG5cbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignYWN0aXZhdGUnLCAoZXZlbnQ6IGFueSkgPT4ge1xuICBldmVudC53YWl0VW50aWwoXG4gICAgY2FjaGVzLmtleXMoKS50aGVuKChjYWNoZU5hbWVzKSA9PiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgIGNhY2hlTmFtZXNcbiAgICAgICAgICAuZmlsdGVyKChjYWNoZU5hbWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZU5hbWUuc3RhcnRzV2l0aCgnY2FjaGVyLWNhY2hlLScpICYmIGNhY2hlTmFtZSAhPT0gQ0FDSEVSX0NBQ0hFX05BTUVcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5tYXAoKGNhY2hlTmFtZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlcy5kZWxldGUoY2FjaGVOYW1lKVxuICAgICAgICAgIH0pLFxuICAgICAgKVxuICAgIH0pLFxuICApXG59KVxuXG5leHBvcnQge31cbiJdfQ==